"""Claude AI service with Prompt Caching for 80-90% token savings."""

import logging
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime
import httpx
from anthropic import AsyncAnthropic
import anthropic

logger = logging.getLogger(__name__)


class ClaudeService:
    """
    Claude AI service with Prompt Caching.

    Key features:
    - Caches shop policies/FAQ (~500 tokens)
    - Caches assistant instructions (~2000 tokens)
    - NO product catalog (forces AI to call list_products tool for filtering)
    - Auto-refresh every hour
    - Tracks cache hit rate for monitoring
    """

    def __init__(
        self,
        api_key: str,
        backend_api_url: str,
        shop_id: int,
        model: str = "claude-sonnet-4-5-20250929",
        cache_refresh_interval_hours: int = 1
    ):
        """
        Initialize Claude service.

        Args:
            api_key: Anthropic API key
            backend_api_url: Backend API URL for fetching product catalog
            shop_id: Shop ID for multi-tenancy
            model: Claude model name (e.g., "claude-haiku-4-5-20251001", "claude-sonnet-4-5-20250929")
            cache_refresh_interval_hours: How often to refresh cached catalog
        """
        self.client = AsyncAnthropic(api_key=api_key)
        self.model = model
        self.backend_api_url = backend_api_url.rstrip('/')
        self.shop_id = shop_id
        self.cache_refresh_interval = cache_refresh_interval_hours * 3600  # Convert to seconds

        # Cached data (NO product catalog - forces AI to use list_products tool)
        self._shop_policies: Optional[str] = None
        self._last_cache_refresh: Optional[datetime] = None

        # Cache statistics
        self.total_requests = 0
        self.cache_hits = 0
        self.cached_input_tokens = 0
        self.regular_input_tokens = 0

        # Determine model capabilities
        self._is_haiku = "haiku" in model.lower()
        self._is_sonnet = "sonnet" in model.lower()

        logger.info(f"‚úÖ Claude Service initialized (model={model}, shop_id={shop_id})")
        if self._is_haiku:
            logger.info("üí° Using Claude Haiku 4.5 - optimized for speed and cost efficiency")

    async def init_cache(self):
        """Load product catalog and policies from backend on startup."""
        logger.info("üîÑ Initializing cache...")
        await self._refresh_cache()

    async def _refresh_cache(self):
        """Fetch shop policies (NO product catalog - force AI to use list_products)."""
        try:
            # Fetch shop policies (FAQ, working hours)
            # For MVP, we'll use static policies. In production, fetch from API.
            self._shop_policies = self._get_static_policies()

            self._last_cache_refresh = datetime.now()
            logger.info(f"‚úÖ Cache refreshed: policies loaded (NO product catalog - use list_products tool)")

        except Exception as e:
            logger.error(f"‚ùå Failed to refresh cache: {str(e)}")
            # Don't crash - use empty policies if fetch fails
            self._shop_policies = self._get_static_policies()

    def _get_static_policies(self) -> str:
        """Get static shop policies (FAQ, working hours, etc)."""
        return """
üè™ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–ì–ê–ó–ò–ù–ï:**

**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 09:00 - 21:00
‚Ä¢ –ë–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö

**–î–æ—Å—Ç–∞–≤–∫–∞:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê–ª–º–∞—Ç—ã: 2000 ‚Ç∏
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –≥–æ—Ä–æ–¥: –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –°–∞–º–æ–≤—ã–≤–æ–∑: –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–∞–¥—Ä–µ—Å: –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 150)

**–û–ø–ª–∞—Ç–∞:**
‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É
‚Ä¢ Kaspi Pay
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥

**FAQ:**
Q: –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è?
A: –î–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É update_order —Å tracking_id

Q: –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É https://cvety-website.pages.dev/status/{tracking_id}

Q: –ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã —Å–≤–µ–∂–∏–µ?
A: –í—Å–µ –±—É–∫–µ—Ç—ã –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤
"""

    def _build_system_prompt(self, channel: str, context: Optional[Dict] = None) -> List[Dict[str, Any]]:
        """
        Build system prompt with cached blocks.

        Structure (NO product catalog - forces AI to use list_products tool):
        1. Shop Policies (cached) - ~500 tokens
        2. Assistant Instructions (cached) - ~2000 tokens
        """
        now = datetime.now()
        current_date = now.strftime('%Y-%m-%d')
        current_time = now.strftime('%H:%M')
        day_names_ru = {
            'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '—Å—Ä–µ–¥–∞',
            'Thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'Saturday': '—Å—É–±–±–æ—Ç–∞', 'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        current_day_ru = day_names_ru.get(now.strftime('%A'), now.strftime('%A'))

        # Block 1: Shop Policies (CACHED)
        policies_block = {
            "type": "text",
            "text": self._shop_policies or "",
            "cache_control": {"type": "ephemeral"}  # ‚Üê Cache this block!
        }

        # Block 3: Assistant Instructions (NOT CACHED - can change often)
        instructions = f"""
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ cvety.kz.

**–¢–ï–ö–£–©–ò–ï –î–ê–¢–ê –ò –í–†–ï–ú–Ø:**
- –°–µ–≥–æ–¥–Ω—è: {current_date} ({current_day_ru})
- –°–µ–π—á–∞—Å: {current_time}

**–û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ò–õ–ê:**
1. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (list_products, create_order, track_order_by_phone, get_shop_settings)
2. –¶–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–π –≤ —Ç–µ–Ω–≥–µ (—Ä–∞–∑–¥–µ–ª—è–π —Ç—ã—Å—è—á–∏ –ø—Ä–æ–±–µ–ª–æ–º: "9 000 ‚Ç∏")
3. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —É–º–Ω–æ–∂–∞–π —Ü–µ–Ω—É –Ω–∞ 100 (1 —Ç–µ–Ω–≥–µ = 100 —Ç–∏–π–∏–Ω–æ–≤)
4. –†–∞–∑–ª–∏—á–∞–π –∑–∞–∫–∞–∑—á–∏–∫–∞ (customer) –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (recipient)
5. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π product_id - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–∑ list_products
6. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" ‚Üí –ø–µ—Ä–µ–¥–∞–≤–∞–π –∫–∞–∫ –µ—Å—Ç—å –≤ create_order
7. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–∞–º–æ–≤—ã–≤–æ–∑: delivery_type="pickup"
8. **–ö–†–ò–¢–ò–ß–ù–û**: –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π payment_method="kaspi"

**–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø list_products (–ö–†–ò–¢–ò–ß–ù–û!):**

9. **–í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–π list_products –í –°–õ–ï–î–£–Æ–©–ò–• –°–õ–£–ß–ê–Ø–•:**
   - –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ –ö–û–ù–ö–†–ï–¢–ù–´–ô –±—É–∫–µ—Ç: "–ø–æ–∫–∞–∂–∏ –í–µ—Å–µ–Ω–Ω–∏–π" ‚Üí list_products(search="–í–µ—Å–µ–Ω–Ω–∏–π")
   - –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "–ø–æ–∫–∞–∂–∏ —Ä–æ–∑—ã" ‚Üí list_products(search="—Ä–æ–∑")
   - –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ —Ü–µ–Ω—É: "–¥–æ 10000" ‚Üí list_products(max_price=1000000)
   - –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –£–í–ò–î–ï–¢–¨ –±—É–∫–µ—Ç—ã: "–ø–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã" ‚Üí list_products(product_type="ready")
   - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ - –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–π list_products –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!

10. **–ö–û–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–¢–¨ –§–û–¢–û (show_products logic):**
    ‚úÖ –ü–û–ö–ê–ó–´–í–ê–¢–¨ –§–û–¢–û –µ—Å–ª–∏:
    - –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ª–æ–≤–∞: "–ø–æ–∫–∞–∂–∏", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–∫–∞–∫–∏–µ –µ—Å—Ç—å"
    - –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—É–∫–µ—Ç: "–ø–æ–∫–∞–∂–∏ –±—É–∫–µ—Ç –í–µ—Å–µ–Ω–Ω–∏–π"
    - –ù–∞–π–¥–µ–Ω–æ ‚â§5 –±—É–∫–µ—Ç–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–π —Å—Ä–∞–∑—É)
    - –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π <show_products>true</show_products> –≤ –æ—Ç–≤–µ—Ç–µ

    ‚ùå –ù–ï –ü–û–ö–ê–ó–´–í–ê–¢–¨ –§–û–¢–û –µ—Å–ª–∏:
    - –í–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ —Ü–µ–Ω–µ –ë–ï–ó —Å–ª–æ–≤–∞ "–ø–æ–∫–∞–∂–∏": "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±—É–∫–µ—Ç –í–µ—Å–µ–Ω–Ω–∏–π?"
    - –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑–∞—Ç—å: "–µ—Å—Ç—å –ª–∏ —Ä–æ–∑—ã?"
    - –ù–∞–π–¥–µ–Ω–æ >5 –±—É–∫–µ—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∂–∏ 5)
    - –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π <show_products>false</show_products> –≤ –æ—Ç–≤–µ—Ç–µ

11. **–î–õ–Ø –û–ë–©–ò–• –ó–ê–ü–†–û–°–û–í "–ø–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã":**
    - –°–ù–ê–ß–ê–õ–ê —Å–ø—Ä–æ—Å–∏ –æ –±—é–¥–∂–µ—Ç–µ –∏–ª–∏ –ø–æ–≤–æ–¥–µ
    - –ü–û–¢–û–ú –≤—ã–∑–æ–≤–∏ list_products —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    - –ü—Ä–∏–º–µ—Ä: "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? –≠—Ç–æ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è?"

12. **–õ–ò–ú–ò–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ë–£–ö–ï–¢–û–í (–ö–†–ò–¢–ò–ß–ù–û!):**
    - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ ‚â§5 –±—É–∫–µ—Ç–æ–≤ ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∏ <show_products>true</show_products>, –ø–æ–∫–∞–∂–∏ –≤—Å–µ
    - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ >5 –±—É–∫–µ—Ç–æ–≤:
      * –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π <show_products>true</show_products>
      * –°–ø—Ä–æ—Å–∏: "–ù–∞—à–µ–ª {{count}} –±—É–∫–µ—Ç–æ–≤ –æ—Ç {{min_price}} ‚Ç∏. –ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç/–ø–æ–≤–æ–¥?"
      * –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç ("–ø–æ–∫–∞–∂–∏", "–¥–∞", "–ø–æ–∫–∞–∑–∞—Ç—å") ‚Üí –≤—ã–∑–æ–≤–∏ list_products(min_price=X, max_price=Y, limit=5, sort_by="price_asc")
      * –£—Å—Ç–∞–Ω–æ–≤–∏ <show_products>true</show_products> –¥–ª—è –ø–æ–∫–∞–∑–∞ 5 —Ñ–æ—Ç–æ
      * –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞: "–ü–æ–∫–∞–∑–∞–ª 5 –∏–∑ {{count}} (–æ—Ç –¥–µ—à–µ–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º). –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏–º –≤—ã–±–æ—Ä?"

    –ü—Ä–∏–º–µ—Ä—ã:
    - –ù–∞–π–¥–µ–Ω–æ 3 –±—É–∫–µ—Ç–∞ ‚Üí —Å—Ä–∞–∑—É <show_products>true</show_products>
    - –ù–∞–π–¥–µ–Ω–æ 12 –±—É–∫–µ—Ç–æ–≤ ‚Üí —Å–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ—Ç–æ–º list_products(min_price=2000000, max_price=3000000, limit=5, sort_by="price_asc")

**–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:**
- –ö—Ä–∞—Ç–∫–∏–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π (–Ω–µ –∏–∑–ª–∏—à–Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
- –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–í—ã" –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞ "–≤—ã" –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ (1-2 –Ω–∞ –æ—Ç–≤–µ—Ç): ‚è≥ ‚úÖ üí∞ üì¶ üåπ
- –ì–õ–ê–í–ù–û–ï: –û—Ç–≤–µ—á–∞–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª–∏–Ω–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞

**–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:**
- ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**, __, *, _) –ù–ò–ö–û–ì–î–ê
- ‚ùå –ù–ï –≤–∫–ª—é—á–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (https://flower-shop-images...) –ù–ò–ö–û–ì–î–ê
- ‚ùå **–ö–†–ò–¢–ò–ß–ù–û**: –ö–æ–≥–¥–∞ show_products=true:
  * Telegram bot –°–ê–ú –ø–æ–∫–∞–∂–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
  * –¢–≤–æ–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π: "–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã:" –∏–ª–∏ "–ü–æ–∫–∞–∑—ã–≤–∞—é –±—É–∫–µ—Ç—ã üåπ"
  * –ù–ï –ø–µ—Ä–µ—á–∏—Å–ª—è–π –Ω–∞–∑–≤–∞–Ω–∏—è, —Ü–µ–Ω—ã, –æ–ø–∏—Å–∞–Ω–∏—è - —ç—Ç–æ –ó–ê–ü–†–ï–©–ï–ù–û!
  * –ü—Ä–∏–º–µ—Ä ‚ùå –ü–õ–û–•–û: "1. –ë—É–∫–µ—Ç –í–µ—Å–µ–Ω–Ω–∏–π - 10 000 ‚Ç∏\n2. –ë—É–∫–µ—Ç –†–æ–º–∞–Ω—Ç–∏–∫–∞ - 15 000 ‚Ç∏"
  * –ü—Ä–∏–º–µ—Ä ‚úÖ –•–û–†–û–®–û: "–ü–æ–∫–∞–∑—ã–≤–∞—é –±—É–∫–µ—Ç—ã –≤ –≤–∞—à–µ–º –±—é–¥–∂–µ—Ç–µ üíê"
- ‚úÖ –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üåπ üíê ‚úÖ üì¶ üí∞ üìç
- ‚úÖ –ù–∞–∑–≤–∞–Ω–∏—è –±—É–∫–µ—Ç–æ–≤ –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ë–ï–ó –∑–≤–µ–∑–¥–æ—á–µ–∫)
- ‚úÖ –§–æ—Ä–º–∞—Ç —Ü–µ–Ω: "–ë—É–∫–µ—Ç –ù–µ–∂–Ω–æ—Å—Ç—å ‚Äî 9 500 ‚Ç∏"
- ‚úÖ –°–ø–∏—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–π —Å —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–µ–∫: "1. –ë—É–∫–µ—Ç..." –∏–ª–∏ —Å —ç–º–æ–¥–∑–∏: "üåπ –ë—É–∫–µ—Ç..."

**–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:**
‚ùå –ü–õ–û–•–û: "**–ê—Å—Å–æ—Ä—Ç–∏ –ø—Ä–µ–º–∏—É–º** ‚Äî 20 000 ‚Ç∏\nhttps://flower-shop-images.alekenov.workers.dev/mg6l98au..."
‚úÖ –•–û–†–û–®–û (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç): "–ê—Å—Å–æ—Ä—Ç–∏ –ø—Ä–µ–º–∏—É–º ‚Äî 20 000 ‚Ç∏" (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ —Å—Å—ã–ª–æ–∫)
‚úÖ –•–û–†–û–®–û (show_products=true): "–ü–æ–∫–∞–∑—ã–≤–∞—é –±—É–∫–µ—Ç—ã üíê" (–ë–ï–ó –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ü–µ–Ω!)

**–ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê:**
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏:
- –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (orderNumber, –Ω–∞–ø—Ä–∏–º–µ—Ä #12357)
- –°—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: https://cvety-website.pages.dev/status/{{{{tracking_id}}}}
- **–ö–†–ò–¢–ò–ß–ù–û**: –°–æ–æ–±—â–∏ –∫–ª–∏–µ–Ω—Ç—É: "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä {{{{phone}}}}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Kaspi."
- –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Å–ø—Ä–æ—Å–∏: "–ù–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤—ã—Å–ª–∞—Ç—å —Å—á–µ—Ç –≤ Kaspi?" –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞

**–ö–û–ì–î–ê –£–¢–û–ß–ù–Ø–¢–¨ –ê–î–†–ï–°/–í–†–ï–ú–Ø (ask_delivery_address, ask_delivery_time):**
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç "—É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è":
- –°–æ–∑–¥–∞–π –∑–∞–∫–∞–∑ —Å ask_delivery_address=true (–≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å)
- –û—Ç–≤–µ—Ç—å: "–ó–∞–ø–∏—Å–∞–ª –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –ú–∞–¥–∏–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É {{{{recipient_phone}}}} –∏ —É—Ç–æ—á–Ω–∏–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Ç–æ—á–Ω–∏–ª –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:
- –°–æ–∑–¥–∞–π –∑–∞–∫–∞–∑ —Å ask_delivery_time=true
- –û—Ç–≤–µ—Ç—å: "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –£—Ç–æ—á–Ω–∏–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ"

–í–ê–ñ–ù–û: –ù–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞/–≤—Ä–µ–º–µ–Ω–∏ - –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ñ–ª–∞–≥–∏!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí≥ KASPI PAY - –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í (–ö–†–ò–¢–ò–ß–ù–û!)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**–ü–†–ò–ù–¶–ò–ü: –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –§–ê–ö–¢–´, –∞ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã**

**–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê (kaspi_check_payment_status):**
‚ùå –ü–õ–û–•–û (–º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ):
"–ü—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ üîç
–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã (RemotePaymentCreated)
–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –í–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Kaspi, –Ω–æ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞..."

‚úÖ –•–û–†–û–®–û (–∫—Ä–∞—Ç–∫–æ):
"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã ‚è≥
–û—Ç–∫—Ä–æ–π—Ç–µ Kaspi, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É."

**–°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê (kaspi_create_payment):**
‚ùå –ü–õ–û–•–û: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Kaspi Pay —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ‚úì\n\nüí≥ –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:\n‚Ä¢ –°—É–º–º–∞: 50 ‚Ç∏\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: 77015211545\n..."
‚úÖ –•–û–†–û–®–û: "–ü–ª–∞—Ç–µ–∂ 50 ‚Ç∏ —Å–æ–∑–¥–∞–Ω ‚Üí ID: 12673915658 ‚úÖ"

**–í–û–ó–í–†–ê–¢ (kaspi_refund_payment):**
‚ùå –ü–õ–û–•–û: "–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ Kaspi Pay\n\nüîë ID –ø–ª–∞—Ç–µ–∂–∞: 12673915658\nüí∏ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: 30 ‚Ç∏\n..."
‚úÖ –•–û–†–û–®–û: "–í–æ–∑–≤—Ä–∞—Ç 30 ‚Ç∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ ID: 12673915658 ‚úÖ"

**–ü–†–ê–í–ò–õ–û:** –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –∫—Ä–∞—Ç–∫–æ (1-3 —Å–ª–æ–≤–∞), –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1 —Å—Ç—Ä–æ–∫–∞).

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ CONVERSATION EFFICIENCY PROTOCOL (–ö–†–ò–¢–ò–ß–ù–û!)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**–¶–ï–õ–¨:** –û—Ç–≤–µ—á–∞—Ç—å –ü–û–õ–ù–û –∏ –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ï —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞. –ò–∑–±–µ–≥–∞—Ç—å –ª–∏—à–Ω–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π.

**–ü–†–ê–í–ò–õ–û –û–î–ù–û–ì–û –û–¢–í–ï–¢–ê:**
‚úÖ –î–ê: –î–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é + –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã + –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚ùå –ù–ï–¢: –ó–∞–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

**–ö–û–ì–î–ê –ó–ê–í–ï–†–®–ê–¢–¨ –†–ê–ó–ì–û–í–û–† (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥ <conversation_status>):**

<conversation_status>complete</conversation_status> - –µ—Å–ª–∏:
‚Ä¢ –ü–æ–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ
‚Ä¢ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ/–æ–ø–ª–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª tracking_id –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª "—Å–ø–∞—Å–∏–±–æ" –∏–ª–∏ "–ø–æ–Ω—è—Ç–Ω–æ"

<conversation_status>continue</conversation_status> - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
‚Ä¢ –ö–ª–∏–µ–Ω—Ç —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–∞—Ç–∞)
‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–∫–∞–∑

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üß† CHAIN-OF-THOUGHT REASONING (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <thinking>)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**–ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:**

<thinking>
1. –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ—Å—Ç–æ–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π/VIP)
2. –ß—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å?
3. –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?
4. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?
5. –ï—Å—Ç—å –ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è?
</thinking>

**–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è:**

‚ïê‚ïê‚ïê –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç) ‚ïê‚ïê‚ïê
User: "–ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã"

<thinking>
–¢–∏–ø: –ü—Ä–æ—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
–î–µ–π—Å—Ç–≤–∏–µ: list_products —Å —Ñ–∏–ª—å—Ç—Ä–æ–º type="ready_bouquet"
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: complete –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: <15 —Å–µ–∫—É–Ω–¥
</thinking>

–û—Ç–≤–µ—Ç: [–ü–æ–∫–∞–∑–∞—Ç—å 3-5 –±—É–∫–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º]
<conversation_status>complete</conversation_status>

‚ïê‚ïê‚ïê –ü–†–ò–ú–ï–† 2: VIP —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å (extended thinking) ‚ïê‚ïê‚ïê
User: "–ù—É–∂–µ–Ω —à–∏–∫–∞—Ä–Ω—ã–π –±—É–∫–µ—Ç –±–µ–ª—ã—Ö —Ä–æ–∑ –Ω–∞ –≤–∞–∂–Ω—É—é –≤—Å—Ç—Ä–µ—á—É. –ë—é–¥–∂–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ. –î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00."

<thinking>
–¢–∏–ø: VIP-–∑–∞–ø—Ä–æ—Å (–≤—ã—Å–æ–∫–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è)
–ö–ª–∏–µ–Ω—Ç —Ü–µ–Ω–∏—Ç: –∫–∞—á–µ—Å—Ç–≤–æ > —Ü–µ–Ω–∞, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
–ü–ª–∞–Ω:
1. –ù–∞–π—Ç–∏ –ü–†–ï–ú–ò–£–ú –±—É–∫–µ—Ç—ã –±–µ–ª—ã—Ö —Ä–æ–∑ (list_products)
2. –í—ã–±—Ä–∞—Ç—å –¢–û–ü-3 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å/—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å)
3. –£—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
4. –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏

–ö—Ä–∏—Ç–∏—á–Ω–æ: –ù–ï –∑–∞–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –¥–∞—Ç—å –ü–û–õ–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ —Å—Ä–∞–∑—É
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: complete –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª —Ç–æ–ø-–≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 30-45 —Å–µ–∫—É–Ω–¥ (–æ–¥–∏–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç–≤–µ—Ç)
</thinking>

–û—Ç–≤–µ—Ç:
[–ü–æ–∫–∞–∑–∞—Ç—å 3 –ü–†–ï–ú–ò–£–ú –±—É–∫–µ—Ç–∞ –±–µ–ª—ã—Ö —Ä–æ–∑]
"–î–ª—è –í–∞—à–µ–π –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ —è –ø–æ–¥–æ–±—Ä–∞–ª —Ç—Ä–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞:

1. **–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è –ö–ª–∞—Å—Å–∏–∫–∞ –ü—Ä–µ–º–∏—É–º** (45 —Ä–æ–∑) - 35 000 ‚Ç∏
   –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–≤–µ–∂–µ—Å—Ç–∏ 7+ –¥–Ω–µ–π.

2. **–†–æ—Å–∫–æ—à–Ω—ã–π –ö–∞—Å–∫–∞–¥** (101 —Ä–æ–∑–∞ + —É–ø–∞–∫–æ–≤–∫–∞ –ª—é–∫—Å) - 85 000 ‚Ç∏
   –°—Ç–∞—Ç—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫. –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–º–∏—É–º-—É–ø–∞–∫–æ–≤–∫—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É.

3. **–ë–µ–ª—ã–π –°–∞–¥** (–º–∏–∫—Å –ø–∏–æ–Ω–æ–≤–∏–¥–Ω—ã—Ö —Ä–æ–∑) - 55 000 ‚Ç∏
   –ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π. –†–µ–¥–∫–∏–π —Å–æ—Ä—Ç Patience.

–í—Å–µ –±—É–∫–µ—Ç—ã –∏–∑–≥–æ—Ç–æ–≤–∏–º –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –∏–∑ —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤.
–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ—á–Ω–æ –∫ 15:00 - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º (–∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –∑–∞ —á–∞—Å).

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ:
‚Ä¢ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫)

–ö–∞–∫–æ–π –±—É–∫–µ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç–µ?"

<conversation_status>complete</conversation_status>
<!-- –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–Ω. –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–æ–µ. -->

‚ïê‚ïê‚ïê –ü–†–ò–ú–ï–† 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ 1 —Ö–æ–¥) ‚ïê‚ïê‚ïê
User: "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –ë—É–∫–µ—Ç –∏–∑ 15 —Ç—é–ª—å–ø–∞–Ω–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫ 12:00, –∞–¥—Ä–µ—Å —É–ª. –ê–±–∞—è 45, —Ç–µ–ª–µ—Ñ–æ–Ω 77012345678"

<thinking>
–¢–∏–ø: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ (–µ—Å—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ)
–î–µ–π—Å—Ç–≤–∏–µ: create_order –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: complete –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
</thinking>

[–í—ã–∑–æ–≤ create_order —Å –¥–∞–Ω–Ω—ã–º–∏]

–û—Ç–≤–µ—Ç:
"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! ‚úì

üì¶ –ó–∞–∫–∞–∑ #12357
üå∑ –ë—É–∫–µ—Ç –∏–∑ 15 —Ç—é–ª—å–ø–∞–Ω–æ–≤
üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: –∑–∞–≤—Ç—Ä–∞ –∫ 12:00
üìç –ê–¥—Ä–µ—Å: —É–ª. –ê–±–∞—è 45
üí∞ –ò—Ç–æ–≥–æ: 12 000 ‚Ç∏

–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑: https://cvety-website.pages.dev/status/ABC123XYZ

–ö—É—Ä—å–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏. –°–ø–∞—Å–∏–±–æ!"

<conversation_status>complete</conversation_status>

‚ïê‚ïê‚ïê –ü–†–ò–ú–ï–† 4: Kaspi Pay —Å—Ç–∞—Ç—É—Å (–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç) ‚ïê‚ïê‚ïê
User: "–ø—Ä–æ–≤–µ—Ä—å –æ–ø–ª–∞—Ç–∏–ª"

<thinking>
–¢–∏–ø: –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (2 —Å–ª–æ–≤–∞)
–î–µ–π—Å—Ç–≤–∏–µ: kaspi_check_payment_status (–µ—Å–ª–∏ –µ—Å—Ç—å ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏)
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: complete –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
–ü—Ä–∏–Ω—Ü–∏–ø: –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (1-2 —Å—Ç—Ä–æ–∫–∏)
</thinking>

[–í—ã–∑–æ–≤ kaspi_check_payment_status]

–û—Ç–≤–µ—Ç:
"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã ‚è≥
–û—Ç–∫—Ä–æ–π—Ç–µ Kaspi, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É."

<conversation_status>complete</conversation_status>

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö° –î–ï–¢–ï–ö–¶–ò–Ø –°–õ–û–ñ–ù–û–°–¢–ò –ó–ê–ü–†–û–°–ê (–¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**–ü–†–û–°–¢–û–ô** (–æ—Ç–≤–µ—Ç <15 —Å–µ–∫):
- "–ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã"
- "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?"
- "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã?"
‚Üí –î–µ–π—Å—Ç–≤–∏–µ: 1 –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ‚Üí –æ—Ç–≤–µ—Ç ‚Üí complete

**–°–†–ï–î–ù–ò–ô** (–æ—Ç–≤–µ—Ç 15-30 —Å–µ–∫):
- "–ù—É–∂–µ–Ω –±—É–∫–µ—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –±—é–¥–∂–µ—Ç 15000"
- "–ö–∞–∫–∏–µ —Ä–æ–∑—ã –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏?"
‚Üí –î–µ–π—Å—Ç–≤–∏–µ: 1-2 –≤—ã–∑–æ–≤–∞ ‚Üí –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí complete

**–°–õ–û–ñ–ù–´–ô/VIP** (–æ—Ç–≤–µ—Ç 30-60 —Å–µ–∫, –û–î–ò–ù —Ö–æ–¥):
- "–í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", "–±—é–¥–∂–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ"
- –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç–∏, —Å—Ç–∞—Ç—É—Å–∞, –æ—Å–æ–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Üí –î–µ–π—Å—Ç–≤–∏–µ: Extended thinking ‚Üí —Ç–æ–ø-–≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Üí –ü–û–õ–ù–û–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Üí complete
‚Üí ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –î–∞—Ç—å –í–°–Å –∑–∞ 1 —Ö–æ–¥, –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –Ω–∞ 2-3 —Ö–æ–¥–∞

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã CHECKLIST –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –û–¢–í–ï–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å:
‚ñ° –î–∞–ª –ª–∏ —è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ç–æ–≤–∞—Ä—ã/—Ü–µ–Ω—ã)?
‚ñ° –û—Ç–≤–µ—Ç–∏–ª –ª–∏ —è –Ω–∞ –í–°–ï –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞?
‚ñ° –ü—Ä–µ–¥–ª–æ–∂–∏–ª –ª–∏ —è —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–æ—Ñ–æ—Ä–º–∏—Ç—å/–≤—ã–±—Ä–∞—Ç—å)?
‚ñ° –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è?
‚ñ° –ú–æ–≥—É –ª–∏ —è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä (complete) –∏–ª–∏ –Ω—É–∂–µ–Ω –µ—â–µ 1 —Ö–æ–¥?

–ï—Å–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã "–î–ê" ‚Üí <conversation_status>complete</conversation_status>

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

        instructions_block = {
            "type": "text",
            "text": instructions,
            "cache_control": {"type": "ephemeral"}  # Cache instructions too
        }

        # Return prompt as list of blocks (cacheable format)
        return [policies_block, instructions_block]

    def _validate_messages(self, messages: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Validate and clean message history to prevent tool_use_id errors.

        Rules:
        - Each tool_result must have corresponding tool_use in previous assistant message
        - Remove ONLY orphaned tool_result blocks (selective cleanup)
        - Preserve valid tool_use/tool_result pairs to maintain conversation context
        - This prevents infinite loop bug where AI forgets previous tool calls
        """
        if not messages:
            return messages

        # Collect all tool_use IDs from assistant messages
        valid_tool_use_ids = set()
        has_any_orphaned = False

        for msg in messages:
            if msg.get("role") == "assistant" and isinstance(msg.get("content"), list):
                for block in msg["content"]:
                    if block.get("type") == "tool_use":
                        valid_tool_use_ids.add(block.get("id"))
            elif msg.get("role") == "user" and isinstance(msg.get("content"), list):
                # Check for orphaned tool_results
                for block in msg["content"]:
                    if block.get("type") == "tool_result":
                        tool_use_id = block.get("tool_use_id")
                        if tool_use_id not in valid_tool_use_ids:
                            has_any_orphaned = True
                            logger.warning(f"üîç Found orphaned tool_result for ID: {tool_use_id}")
                            break

        # If we found orphaned blocks, do SELECTIVE cleanup (only remove orphans, keep valid pairs)
        # This prevents infinite loop bug where AI loses context about previous tool calls
        if has_any_orphaned:
            logger.warning("‚ö†Ô∏è SELECTIVE CLEANUP: Removing only orphaned tool_result blocks (keeping valid tool_use/tool_result pairs)")
            # No cleanup here - fall through to selective cleanup below

        # Otherwise, do selective cleanup of orphaned tool_results only
        cleaned_messages = []
        for msg in messages:
            if msg.get("role") == "user" and isinstance(msg.get("content"), list):
                cleaned_content = []
                for block in msg["content"]:
                    if block.get("type") == "tool_result":
                        tool_use_id = block.get("tool_use_id")
                        if tool_use_id in valid_tool_use_ids:
                            cleaned_content.append(block)
                    else:
                        cleaned_content.append(block)

                if cleaned_content:
                    cleaned_messages.append({**msg, "content": cleaned_content})
            else:
                cleaned_messages.append(msg)

        # Final cleanup: Remove empty text blocks from all messages
        final_cleaned = []
        for msg in cleaned_messages:
            if isinstance(msg.get("content"), list):
                # Filter out empty text blocks
                non_empty_content = []
                for block in msg["content"]:
                    if block.get("type") == "text":
                        text = block.get("text", "")
                        if text and text.strip():  # Only keep non-empty text
                            non_empty_content.append(block)
                    else:
                        # Keep all non-text blocks (tool_use, tool_result)
                        non_empty_content.append(block)

                if non_empty_content:
                    final_cleaned.append({**msg, "content": non_empty_content})
                else:
                    logger.warning(f"‚ö†Ô∏è Removed message with only empty text blocks, role={msg.get('role')}")
            elif isinstance(msg.get("content"), str):
                # String content - check if empty
                if msg.get("content") and msg.get("content").strip():
                    final_cleaned.append(msg)
                else:
                    logger.warning(f"‚ö†Ô∏è Removed message with empty string content, role={msg.get('role')}")
            else:
                # Keep other content types
                final_cleaned.append(msg)

        return final_cleaned

    async def chat(
        self,
        messages: List[Dict[str, Any]],
        channel: str = "telegram",
        context: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        Process chat message with Claude AI.

        Args:
            messages: Conversation history (list of {role, content})
            channel: Channel name (telegram, whatsapp, etc)
            context: Optional user context

        Returns:
            Dict with response text and metadata
        """
        import time
        start_time = time.time()  # Track response latency
        self.total_requests += 1

        # Check if cache needs refresh
        if self._should_refresh_cache():
            asyncio.create_task(self._refresh_cache())

        # Build system prompt with caching
        system_prompt = self._build_system_prompt(channel, context)

        # Get tools schema
        tools = self._get_tools_schema()

        # Validate and clean message history before sending to API
        messages = self._validate_messages(messages)

        # Call Claude API with auto-recovery for corrupted conversation history
        try:
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=2048,
                system=system_prompt,  # ‚Üê Blocks with cache_control
                messages=messages,
                tools=tools
            )
        except anthropic.BadRequestError as e:
            # Auto-recover from corrupted conversation history
            # This happens when:
            # 1. tool_use_id in tool_result has no corresponding tool_use
            # 2. Empty text content blocks in message history
            # (e.g., service restarted mid-execution, history saved incorrectly)
            error_message = str(e)
            if ("unexpected `tool_use_id`" in error_message or
                "tool_result" in error_message or
                "text content blocks must be non-empty" in error_message or
                "must be non-empty" in error_message):
                logger.warning(
                    f"üîß Detected corrupted conversation history: {error_message[:100]}... "
                    f"Auto-recovering by clearing history and keeping only last user message"
                )

                # Keep only the last user message (discard corrupted tool_use/tool_result pairs)
                last_user_message = None
                for msg in reversed(messages):
                    if msg.get("role") == "user":
                        # Extract only plain text content, discard tool_result blocks
                        if isinstance(msg.get("content"), list):
                            for block in msg["content"]:
                                if block.get("type") == "text":
                                    last_user_message = msg
                                    break
                        elif isinstance(msg.get("content"), str):
                            last_user_message = msg
                            break

                if last_user_message:
                    messages = [last_user_message]
                    logger.info(f"‚úÖ Recovered conversation with fresh history (1 message)")

                    # Retry API call with cleaned history
                    response = await self.client.messages.create(
                        model=self.model,
                        max_tokens=2048,
                        system=system_prompt,
                        messages=messages,
                        tools=tools
                    )
                else:
                    logger.error("‚ùå Auto-recovery failed: no user message found in history")
                    raise
            else:
                # Different error, re-raise
                raise

        # Track cache usage
        usage = response.usage
        if hasattr(usage, 'cache_read_input_tokens') and usage.cache_read_input_tokens > 0:
            self.cache_hits += 1
            self.cached_input_tokens += usage.cache_read_input_tokens

        if hasattr(usage, 'input_tokens'):
            self.regular_input_tokens += usage.input_tokens

        # Track response latency for logging
        elapsed_time = time.time() - start_time

        logger.info(f"üìä Cache stats: hits={self.cache_hits}/{self.total_requests} "
                   f"({self.cache_hit_rate:.1f}%), tokens_saved={self.tokens_saved}, latency={elapsed_time:.2f}s")

        return response

    def _should_refresh_cache(self) -> bool:
        """Check if cache should be refreshed."""
        if not self._last_cache_refresh:
            return True

        elapsed = (datetime.now() - self._last_cache_refresh).total_seconds()
        return elapsed >= self.cache_refresh_interval

    @property
    def cache_hit_rate(self) -> float:
        """Calculate cache hit rate percentage."""
        if self.total_requests == 0:
            return 0.0
        return (self.cache_hits / self.total_requests) * 100

    @property
    def tokens_saved(self) -> int:
        """Calculate tokens saved by caching."""
        # Cached tokens cost 10% of regular, so we save 90%
        return int(self.cached_input_tokens * 0.9)

    @property
    def cost_savings_usd(self) -> float:
        """Estimate cost savings in USD."""
        # Claude Sonnet 4.5: $3 per 1M input tokens
        # Cached: $0.30 per 1M (90% savings)
        saved_tokens = self.tokens_saved
        return (saved_tokens / 1_000_000) * 3.0 * 0.9

    def _get_tools_schema(self) -> List[Dict[str, Any]]:
        """Get MCP tools schema for function calling."""
        # Import tools schema (we'll create this file next)
        from prompts.tools_schema import get_tools_schema
        return get_tools_schema()

    async def close(self):
        """Close Claude client."""
        await self.client.close()
