#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞ - –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!
"""
import os
import logging
import requests
import asyncio
from dotenv import load_dotenv
from telegram import Update, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "https://figma-product-catalog-production.up.railway.app/api/v1")
SHOP_ID = int(os.getenv("SHOP_ID", "17008"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def format_price(price_kopecks: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: 15000 -> 15 000"""
    price_tenge = price_kopecks / 100
    return f"{price_tenge:,.0f}".replace(",", " ")


async def send_product_with_buttons(message, product: dict, show_similar_btn: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    caption = f"{product['name']}\nüí∞ {format_price(product['price'])}‚Ç∏"

    keyboard = [
        [InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product['id']}")],
        [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{product['id']}")]
    ]

    if show_similar_btn:
        keyboard.append([InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ", callback_data="show_more_similar")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_photo(
        photo=product['image'],
        caption=caption,
        reply_markup=reply_markup
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –±—É–∫–µ—Ç—ã.\n\n"
        "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"
    )


async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –±—é–¥–∂–µ—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton("–î–æ 10 000‚Ç∏", callback_data="price_0_10000"),
            InlineKeyboardButton("10 000 - 20 000‚Ç∏", callback_data="price_10000_20000"),
        ],
        [
            InlineKeyboardButton("20 000 - 50 000‚Ç∏", callback_data="price_20000_50000"),
            InlineKeyboardButton("–°–≤—ã—à–µ 50 000‚Ç∏", callback_data="price_50000_999999"),
        ],
        [
            InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="price_all"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üí∞ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=reply_markup
    )


async def show_products(query, min_price: int, max_price: int, show_all: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)"""
    await query.edit_message_text("üì¶ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥...")

    try:
        response = requests.get(f"{API_BASE_URL}/products", params={"shop_id": SHOP_ID, "limit": 100})
        all_products = response.json()

        if not all_products:
            await query.edit_message_text("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
        if show_all:
            products = all_products[:5]
            price_label = "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
        else:
            products = [p for p in all_products if min_price <= p['price'] <= max_price][:5]
            price_label = f"{format_price(min_price)} - {format_price(max_price)}‚Ç∏"

        if not products:
            await query.edit_message_text(
                f"üòî –¢–æ–≤–∞—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {price_label} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω."
            )
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.delete_message()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, product in enumerate(products):
            await send_product_with_buttons(query.message, product, show_similar_btn=False)
            if i < len(products) - 1:
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏

    except Exception as e:
        logger.error(f"Error fetching catalog: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")


async def catalog_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    data = query.data

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    if data.startswith("price_"):
        if data == "price_all":
            await show_products(query, 0, 999999999, show_all=True)
        else:
            # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω: price_10000_20000 -> min=1000000, max=2000000 (kopecks)
            _, min_str, max_str = data.split("_")
            min_price = int(min_str) * 100  # tenge to kopecks
            max_price = int(max_str) * 100
            await show_products(query, min_price, max_price)

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ"
    elif data == "show_more_similar":
        similar_products = context.user_data.get('similar_products', [])

        if not similar_products:
            await query.edit_message_caption(
                caption=query.message.caption + "\n\n‚ùå –ë–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, product in enumerate(similar_products[:4]):  # –ú–∞–∫—Å–∏–º—É–º 4 —Ç–æ–≤–∞—Ä–∞
            await send_product_with_buttons(query.message, product, show_similar_btn=False)
            if i < len(similar_products) - 1:
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏

        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        context.user_data['similar_products'] = []

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å"
    elif data.startswith("order_"):
        product_id = data.split("_")[1]
        await query.answer("üõí –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", show_alert=True)
        await query.message.reply_text(
            f"üìû –î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: +7 (701) 521-15-45\n"
            f"WhatsApp: wa.me/77015211545"
        )

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    elif data.startswith("details_"):
        product_id = data.split("_")[1]
        await query.answer("üìã –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            response = requests.get(f"{API_BASE_URL}/products/{product_id}", params={"shop_id": SHOP_ID})
            product = response.json()

            details_text = (
                f"üìã **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ**: {product['name']}\n"
                f"**–¶–µ–Ω–∞**: {format_price(product['price'])}‚Ç∏\n"
                f"**ID**: {product['id']}\n"
            )

            if product.get('description'):
                details_text += f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {product['description']}\n"

            await query.message.reply_text(details_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Error fetching product details: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ visual search"""
    try:
        response = requests.get(f"{API_BASE_URL}/products/search/stats", params={"shop_id": SHOP_ID})
        stats = response.json()

        message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Visual Search:\n\n"
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}\n"
            f"üß† –° embeddings: {stats['products_with_embeddings']}\n"
            f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {stats['coverage_percentage']}%\n"
            f"{'‚úÖ' if stats['search_ready'] else '‚ùå'} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∏—Å–∫—É"
        )

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"Error fetching stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text("üîç –ò—â—É –ø–æ—Ö–æ–∂–∏–µ –±—É–∫–µ—Ç—ã...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)

        # URL —Ñ–æ—Ç–æ –∏–∑ Telegram
        image_url = file.file_path

        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ")
        response = requests.post(
            f"{API_BASE_URL}/products/search/similar",
            json={
                "image_url": image_url,
                "shop_id": SHOP_ID,
                "limit": 5,
                "min_similarity": 0.6
            }
        )

        results = response.json()

        if not results.get('results'):
            await update.message.reply_text("üòî –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π —Ç–æ–≤–∞—Ä (—Ç–æ–ø-1)
        top_product = results['results'][0]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ context –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ"
        if len(results['results']) > 1:
            context.user_data['similar_products'] = results['results'][1:]
            show_similar_button = True
        else:
            context.user_data['similar_products'] = []
            show_similar_button = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-1 —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_product_with_buttons(update.message, top_product, show_similar_btn=show_similar_button)

    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ:\n"
            "‚Ä¢ –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n"
            "‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_TOKEN")
        print("–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: export TELEGRAM_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return

    print(f"ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üì° API: {API_BASE_URL}")
    print(f"üè™ Shop ID: {SHOP_ID}")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("catalog", catalog))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(catalog_button_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –ó–∞–ø—É—Å–∫
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
