#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Claude API –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ telegram –±–æ—Ç–∞ - –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–∫ AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MCP tools.
"""

import anthropic
import os
import json
from datetime import datetime

# MCP —Å–µ—Ä–≤–µ—Ä URL
MCP_BASE_URL = "http://localhost:8000"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP tools –¥–ª—è Claude
MCP_TOOLS = [
    {
        "name": "list_products",
        "description": "Get list of products with filtering. Use shop_id=1 for testing.",
        "input_schema": {
            "type": "object",
            "properties": {
                "shop_id": {"type": "integer", "description": "Filter by shop ID (required, use 1)"},
                "search": {"type": "string", "description": "Search in product names"},
                "product_type": {
                    "type": "string",
                    "description": "Filter by type. Valid values: 'flowers', 'sweets', 'fruits', 'gifts'. Leave empty for all types."
                },
                "enabled_only": {"type": "boolean", "description": "Show only enabled products", "default": True},
                "min_price": {"type": "integer", "description": "Minimum price in tenge"},
                "max_price": {"type": "integer", "description": "Maximum price in tenge"},
                "skip": {"type": "integer", "description": "Number of products to skip", "default": 0},
                "limit": {"type": "integer", "description": "Number of products to return (max 100)", "default": 20}
            },
            "required": ["shop_id"]
        }
    },
    {
        "name": "get_shop_settings",
        "description": "Get shop settings and information. Use shop_id=1 for testing.",
        "input_schema": {
            "type": "object",
            "properties": {
                "shop_id": {"type": "integer", "description": "Shop ID (use 1 for testing)"}
            },
            "required": ["shop_id"]
        }
    },
    {
        "name": "get_telegram_client",
        "description": "Check if telegram user is registered. Returns client info or null.",
        "input_schema": {
            "type": "object",
            "properties": {
                "telegram_user_id": {"type": "string", "description": "Telegram user ID"},
                "shop_id": {"type": "integer", "description": "Shop ID"}
            },
            "required": ["telegram_user_id", "shop_id"]
        }
    }
]

def call_mcp_tool(tool_name: str, arguments: dict):
    """–í—ã–∑–æ–≤ MCP tool —á–µ—Ä–µ–∑ HTTP API"""
    import requests

    print(f"\nüîß –í—ã–∑—ã–≤–∞—é MCP tool: {tool_name}")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(arguments, ensure_ascii=False)}")

    response = requests.post(
        f"{MCP_BASE_URL}/call-tool",
        json={"name": tool_name, "arguments": arguments},
        headers={"Content-Type": "application/json"}
    )

    if response.status_code == 200:
        result = response.json()
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
        return result.get("result")
    else:
        error = response.json()
        print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {error.get('detail', 'Unknown error')}")
        raise Exception(f"MCP tool failed: {error.get('detail')}")

def test_conversation(user_message: str):
    """–¢–µ—Å—Ç–æ–≤–∞—è –±–µ—Å–µ–¥–∞ —Å Claude —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ MCP tools"""

    print("\n" + "="*80)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
    print("="*80)

    client = anthropic.Anthropic(api_key=os.environ.get("ANTHROPIC_API_KEY"))

    messages = [{"role": "user", "content": user_message}]

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ
    system_prompt = """–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.
–ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –±—É–∫–µ—Ç—ã –∏ –ø–æ–¥–∞—Ä–∫–∏.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¶–µ–Ω—ã –≤ –±–∞–∑–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–∏—ã–Ω–∞—Ö (1 —Ç–µ–Ω–≥–µ = 100 —Ç–∏—ã–Ω), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ —Ç–µ–Ω–≥–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ."""

    iteration = 0
    max_iterations = 5

    while iteration < max_iterations:
        iteration += 1
        print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}")

        response = client.messages.create(
            model="claude-sonnet-4-5-20250929",
            max_tokens=2000,
            system=system_prompt,
            tools=MCP_TOOLS,
            messages=messages
        )

        print(f"ü§ñ Claude –æ—Ç–≤–µ—Ç–∏–ª: stop_reason={response.stop_reason}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.stop_reason == "end_turn":
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            for block in response.content:
                if hasattr(block, "text"):
                    print(f"\nüí¨ –û—Ç–≤–µ—Ç AI:\n{block.text}")
            break

        elif response.stop_reason == "tool_use":
            # Claude —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tool
            messages.append({"role": "assistant", "content": response.content})

            tool_results = []
            for block in response.content:
                if block.type == "tool_use":
                    print(f"\nüõ†Ô∏è  Claude –∏—Å–ø–æ–ª—å–∑—É–µ—Ç tool: {block.name}")

                    try:
                        result = call_mcp_tool(block.name, block.input)
                        tool_results.append({
                            "type": "tool_result",
                            "tool_use_id": block.id,
                            "content": json.dumps(result, ensure_ascii=False)
                        })
                    except Exception as e:
                        tool_results.append({
                            "type": "tool_result",
                            "tool_use_id": block.id,
                            "is_error": True,
                            "content": str(e)
                        })

            messages.append({"role": "user", "content": tool_results})
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π stop_reason: {response.stop_reason}")
            break

    print("\n" + "="*80)

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –°–ï–†–í–ï–†–ê –ö–ê–ö –†–ï–ê–õ–¨–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨")
    print(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.environ.get("ANTHROPIC_API_KEY"):
        print("\n‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ANTHROPIC_API_KEY")
        exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    import requests
    try:
        health = requests.get(f"{MCP_BASE_URL}/health").json()
        print(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {health}")
    except Exception as e:
        print(f"‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        exit(1)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_questions = [
        "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –≤—Å–µ –±—É–∫–µ—Ç—ã –∏–∑ —Ü–≤–µ—Ç–æ–≤",
        "–ù–∞–π–¥–∏ –±—É–∫–µ—Ç –∑–∞ 1800 —Ç–µ–Ω–≥–µ",
        "–ö–∞–∫–∏–µ –µ—Å—Ç—å –±—É–∫–µ—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑?",  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ AI –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç type="custom"
    ]

    for question in test_questions:
        try:
            test_conversation(question)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            import traceback
            traceback.print_exc()

    print(f"\n‚è∞ –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
