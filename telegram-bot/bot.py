"""
Telegram Bot for Flower Shop with Claude AI integration.
Supports natural language ordering and catalog browsing.
"""
import os
import logging
from typing import Optional
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from mcp_client import create_mcp_client
from ai_handler import AIHandler


# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class FlowerShopBot:
    """Main Telegram bot class."""

    def __init__(self):
        # Load configuration
        self.telegram_token = os.getenv("TELEGRAM_TOKEN")
        self.mcp_server_url = os.getenv("MCP_SERVER_URL")
        self.shop_id = int(os.getenv("DEFAULT_SHOP_ID", "8"))
        self.webhook_url = os.getenv("WEBHOOK_URL")
        self.webhook_port = int(os.getenv("WEBHOOK_PORT", "8080"))

        # Initialize MCP client
        self.mcp_client = create_mcp_client(self.mcp_server_url)

        # Initialize AI handler
        self.ai_handler = AIHandler(
            mcp_client=self.mcp_client,
            shop_id=self.shop_id
        )

        # Create application
        self.app = Application.builder().token(self.telegram_token).build()

        # Register handlers
        self._register_handlers()

    def _register_handlers(self):
        """Register all command and message handlers."""
        # Commands
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("catalog", self.catalog_command))
        self.app.add_handler(CommandHandler("myorders", self.myorders_command))
        self.app.add_handler(CommandHandler("clear", self.clear_command))

        # Callback queries (inline keyboard buttons)
        self.app.add_handler(CallbackQueryHandler(self.button_callback))

        # Text messages (AI conversation)
        self.app.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

    async def start_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /start command."""
        user = update.effective_user
        welcome_text = f"""üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

–Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–º–æ–≥—É –≤–∞–º:

üåπ –í—ã–±—Ä–∞—Ç—å –±—É–∫–µ—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑
‚è∞ –£–∑–Ω–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –±—É–∫–µ—Ç—ã –¥–æ 10000 —Ç–µ–Ω–≥–µ"
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ä–æ–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑?"

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
/myorders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/help - –ü–æ–º–æ—â—å
"""
        await update.message.reply_text(welcome_text)

    async def help_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /help command."""
        help_text = """üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤
/myorders - –û—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –±—É–∫–µ—Ç–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, —Ü–µ–Ω–µ, —Ç–∏–ø—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã"
‚Ä¢ "–ë—É–∫–µ—Ç –∏–∑ —Ä–æ–∑ –¥–æ 15000 —Ç–µ–Ω–≥–µ"
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
‚Ä¢ "–ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?"

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É - —è –ø–æ–π–º—É! üòä
"""
        await update.message.reply_text(help_text, parse_mode="Markdown")

    async def catalog_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /catalog command."""
        keyboard = [
            [
                InlineKeyboardButton("üåπ –ì–æ—Ç–æ–≤—ã–µ –±—É–∫–µ—Ç—ã", callback_data="catalog_ready"),
                InlineKeyboardButton("‚ú® –ù–∞ –∑–∞–∫–∞–∑", callback_data="catalog_custom")
            ],
            [
                InlineKeyboardButton("üîÑ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="catalog_subscription"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="catalog_search")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup
        )

    async def myorders_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /myorders command."""
        # Ask user for phone number to track orders
        await update.message.reply_text(
            "üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +77011234567"
        )
        # Store state to expect phone number
        context.user_data['expecting_phone'] = True

    async def clear_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /clear command - clear conversation history."""
        user_id = update.effective_user.id
        self.ai_handler.clear_conversation(user_id)
        await update.message.reply_text(
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!"
        )

    async def button_callback(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle inline keyboard button presses."""
        query = update.callback_query
        await query.answer()

        callback_data = query.data

        if callback_data.startswith("catalog_"):
            product_type = callback_data.replace("catalog_", "")

            if product_type == "search":
                await query.edit_message_text(
                    "üîç –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ:\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: \"—Ä–æ–∑—ã\", \"–±—É–∫–µ—Ç –Ω–µ–≤–µ—Å—Ç—ã\", \"—Ü–≤–µ—Ç—ã –¥–æ 10000 —Ç–µ–Ω–≥–µ\""
                )
            else:
                # Trigger AI to list products of this type
                user_id = update.effective_user.id
                prompt = f"–ü–æ–∫–∞–∂–∏ –º–Ω–µ —Ç–æ–≤–∞—Ä—ã —Ç–∏–ø–∞ {product_type}"

                # Process with AI
                response = await self.ai_handler.process_message(user_id, prompt)
                await query.edit_message_text(response)

    async def handle_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle text messages via AI."""
        user_id = update.effective_user.id
        message_text = update.message.text

        # Check if we're expecting phone number for order tracking
        if context.user_data.get('expecting_phone'):
            context.user_data['expecting_phone'] = False
            prompt = f"–û—Ç—Å–ª–µ–¥–∏ –∑–∞–∫–∞–∑—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message_text}"
        else:
            prompt = message_text

        # Show typing indicator
        await update.message.chat.send_action("typing")

        try:
            # Process message with AI
            response = await self.ai_handler.process_message(user_id, prompt)

            # Send response (split if too long)
            if len(response) > 4096:
                # Split into chunks
                for i in range(0, len(response), 4096):
                    await update.message.reply_text(response[i:i+4096])
            else:
                await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
            )

    async def post_init(self, application: Application):
        """Post-initialization hook."""
        logger.info("Bot initialized successfully")

    async def post_shutdown(self, application: Application):
        """Post-shutdown hook."""
        await self.mcp_client.close()
        logger.info("Bot shut down successfully")

    def run_polling(self):
        """Run bot in polling mode (for local development)."""
        logger.info("Starting bot in polling mode...")
        self.app.post_init = self.post_init
        self.app.post_shutdown = self.post_shutdown
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)

    def run_webhook(self):
        """Run bot in webhook mode (for Railway deployment)."""
        logger.info(f"Starting bot in webhook mode on port {self.webhook_port}...")
        self.app.post_init = self.post_init
        self.app.post_shutdown = self.post_shutdown

        self.app.run_webhook(
            listen="0.0.0.0",
            port=self.webhook_port,
            url_path="webhook",
            webhook_url=f"{self.webhook_url}/webhook",
            allowed_updates=Update.ALL_TYPES
        )


def main():
    """Main entry point."""
    bot = FlowerShopBot()

    # Use webhook mode if WEBHOOK_URL is set, otherwise polling
    if os.getenv("WEBHOOK_URL"):
        bot.run_webhook()
    else:
        bot.run_polling()


if __name__ == "__main__":
    main()
