"""
Claude AI Handler with Function Calling integration.
Handles natural language understanding and tool invocation via MCP.
"""
import os
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional
from anthropic import Anthropic
from mcp_client import MCPClient

logger = logging.getLogger(__name__)

# Conversation logs directory
CONVERSATION_LOG_DIR = Path(__file__).parent / "conversation_logs"
CONVERSATION_LOG_DIR.mkdir(exist_ok=True)


class AIHandler:
    """Handles AI conversation and function calling via Claude."""

    def __init__(
        self,
        mcp_client: MCPClient,
        shop_id: int,
        api_key: Optional[str] = None,
        model: Optional[str] = None
    ):
        self.mcp_client = mcp_client
        self.shop_id = shop_id

        # Initialize Claude client
        self.client = Anthropic(
            api_key=api_key or os.getenv("CLAUDE_API_KEY")
        )
        self.model = model or os.getenv("CLAUDE_MODEL", "claude-sonnet-4-5-20250929")

        # Conversation history per user
        self.conversations: Dict[int, List[Dict[str, Any]]] = {}

        # Store last products with images (per user) for sending photos
        self.last_products: Dict[int, List[Dict[str, Any]]] = {}

    def _get_system_prompt(self) -> str:
        """Get system prompt for Claude."""
        return f"""–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º:

1. **–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤** - –∏—Å–ø–æ–ª—å–∑—É–π list_products –¥–ª—è –ø–æ–∏—Å–∫–∞
2. **–û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã** - —Å–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å, –¥–∞—Ç—É, –≤—Ä–µ–º—è, —Ç–æ–≤–∞—Ä—ã) –∏ –≤—ã–∑–æ–≤–∏ create_order
3. **–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã** - –∏—Å–ø–æ–ª—å–∑—É–π track_order_by_phone —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
4. **–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã** - –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã (get_working_hours), –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞ (get_shop_settings)

**–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π shop_id={self.shop_id} –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–π
- –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∏—ã–Ω–∞—Ö (1 —Ç–µ–Ω–≥–µ = 100 —Ç–∏—ã–Ω–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–ª–∏–µ–Ω—Ç—É –≤ —Ç–µ–Ω–≥–µ
- –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω—ã: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
- –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

**–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢ –ò –í–†–ï–ú–ï–ù–ò:**

–ù–ï –°–ü–†–ê–®–ò–í–ê–ô —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª:
- –î–∞—Ç–∞: "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "—á–µ—Ä–µ–∑ N –¥–Ω–µ–π"
- –í—Ä–µ–º—è: "—É—Ç—Ä–æ–º", "–¥–Ω–µ–º", "–≤–µ—á–µ—Ä–æ–º", "–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", "—á–µ—Ä–µ–∑ N —á–∞—Å–æ–≤"

–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ "–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ" –±–µ–∑ –¥–∞—Ç—ã ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π delivery_date="—Å–µ–≥–æ–¥–Ω—è"

**–ü–†–ò–ú–ï–†–´ –ö–û–†–†–ï–ö–¢–ù–´–• –ó–ê–ö–ê–ó–û–í:**
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: "–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ" ‚Üí create_order(delivery_date="—Å–µ–≥–æ–¥–Ω—è", delivery_time="–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", ...)
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º" ‚Üí create_order(delivery_date="–∑–∞–≤—Ç—Ä–∞", delivery_time="—É—Ç—Ä–æ–º", ...)
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" ‚Üí create_order(delivery_date="–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", delivery_time="–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", ...)
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: "—Å–µ–≥–æ–¥–Ω—è –¥–Ω–µ–º" ‚Üí create_order(delivery_date="—Å–µ–≥–æ–¥–Ω—è", delivery_time="–¥–Ω–µ–º", ...)

**–§–û–†–ú–ê–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê:**

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ create_order –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–∫–∞–∂–∏:
- –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (orderNumber, –Ω–∞–ø—Ä–∏–º–µ—Ä #12357)
- –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–£–Æ –°–°–´–õ–ö–£ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—è tracking_id

–§–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
```
‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: [orderNumber]
üîó –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑: https://cvety-website.pages.dev/status/[tracking_id]

[–¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞...]
```

–í–ê–ñ–ù–û: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –î–û–õ–ñ–ù–ê –±—ã—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å tracking_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ create_order.

**ID –º–∞–≥–∞–∑–∏–Ω–∞**: {self.shop_id}
"""

    def _get_tools_schema(self) -> List[Dict[str, Any]]:
        """Define Claude function calling tools schema."""
        return [
            {
                "name": "list_products",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –∏ –±—É–∫–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ç–∏–ø—É, —Ü–µ–Ω–µ",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "search": {
                            "type": "string",
                            "description": "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞"
                        },
                        "product_type": {
                            "type": "string",
                            "enum": ["ready", "custom", "subscription"],
                            "description": "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: ready (–≥–æ—Ç–æ–≤—ã–π –±—É–∫–µ—Ç), custom (–Ω–∞ –∑–∞–∫–∞–∑), subscription (–ø–æ–¥–ø–∏—Å–∫–∞)"
                        },
                        "min_price": {
                            "type": "integer",
                            "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ç–∏—ã–Ω–∞—Ö (1 —Ç–µ–Ω–≥–µ = 100 —Ç–∏—ã–Ω–æ–≤)"
                        },
                        "max_price": {
                            "type": "integer",
                            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ç–∏—ã–Ω–∞—Ö"
                        },
                        "limit": {
                            "type": "integer",
                            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)",
                            "default": 20
                        }
                    },
                    "required": []
                }
            },
            {
                "name": "get_product",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –ø–æ ID",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "product_id": {
                            "type": "integer",
                            "description": "ID —Ç–æ–≤–∞—Ä–∞"
                        }
                    },
                    "required": ["product_id"]
                }
            },
            {
                "name": "create_order",
                "description": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ü–≤–µ—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏: orderNumber (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä #12357), tracking_id (9-–∑–Ω–∞—á–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 901637313), –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π tracking_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: https://cvety-website.pages.dev/status/{tracking_id}",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "customer_name": {
                            "type": "string",
                            "description": "–ü–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                        },
                        "customer_phone": {
                            "type": "string",
                            "description": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"
                        },
                        "delivery_address": {
                            "type": "string",
                            "description": "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–µ—Ä–µ–¥–∞–≤–∞–π —Ñ—Ä–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –ë–ï–ó –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π. –ï–°–õ–ò –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç '—É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è' –∏–ª–∏ '–∫—É—Ä—å–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç' - –ø–µ—Ä–µ–¥–∞–≤–∞–π –∏–º–µ–Ω–Ω–æ —ç—Ç—É —Ñ—Ä–∞–∑—É. –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: '–ê—Å—Ç–∞–Ω–∞, –º–∫—Ä –°–∞–º–∞–ª 2, –¥–æ–º 5', '—É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–º–∫—Ä –°–∞–º–∞–ª, –∫—É—Ä—å–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è', '–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–∫–∞–∂–µ—Ç –∫—É—Ä—å–µ—Ä—É'. –ù–ï —Ç—Ä–µ–±—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç."
                        },
                        "delivery_date": {
                            "type": "string",
                            "description": "–ü–µ—Ä–µ–¥–∞–≤–∞–π —Ñ—Ä–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –ë–ï–ó –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ 2 –¥–Ω—è'. –ï–°–õ–ò –∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ' –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π '—Å–µ–≥–æ–¥–Ω—è'. –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–æ—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
                        },
                        "delivery_time": {
                            "type": "string",
                            "description": "–ü–µ—Ä–µ–¥–∞–≤–∞–π —Ñ—Ä–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –ë–ï–ó –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '—É—Ç—Ä–æ–º', '–¥–Ω–µ–º', '–≤–µ—á–µ—Ä–æ–º', '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ', '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'. –ï–°–õ–ò –∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ' ‚Äî –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ä–æ–≤–Ω–æ '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'. –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–æ—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM."
                        },
                        "items": {
                            "type": "array",
                            "description": "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "product_id": {"type": "integer"},
                                    "quantity": {"type": "integer"}
                                },
                                "required": ["product_id", "quantity"]
                            }
                        },
                        "total_price": {
                            "type": "integer",
                            "description": "–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∏—ã–Ω–∞—Ö"
                        },
                        "notes": {
                            "type": "string",
                            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"
                        }
                    },
                    "required": [
                        "customer_name",
                        "customer_phone",
                        "delivery_address",
                        "delivery_date",
                        "delivery_time",
                        "items",
                        "total_price"
                    ]
                }
            },
            {
                "name": "track_order_by_phone",
                "description": "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "customer_phone": {
                            "type": "string",
                            "description": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"
                        }
                    },
                    "required": ["customer_phone"]
                }
            },
            {
                "name": "get_working_hours",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                "input_schema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            },
            {
                "name": "get_shop_settings",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ",
                "input_schema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            }
        ]

    async def _execute_tool(
        self,
        tool_name: str,
        tool_input: Dict[str, Any],
        user_id: int
    ) -> str:
        """
        Execute a tool call via MCP client.

        Args:
            tool_name: Name of the tool to execute
            tool_input: Tool arguments
            user_id: Telegram user ID for storing product results and order identification

        Returns:
            String representation of tool result
        """
        # Add shop_id to all tool calls
        tool_input["shop_id"] = self.shop_id

        # Add telegram_user_id for order creation
        if tool_name == "create_order":
            tool_input["telegram_user_id"] = str(user_id)
            logger.info(f"üì± Added telegram_user_id: {user_id}")

        logger.info(f"üîß TOOL CALL: {tool_name}")
        logger.info(f"üì• Arguments: {tool_input}")

        try:
            if tool_name == "list_products":
                result = await self.mcp_client.list_products(**tool_input)
                # Store products for image sending
                if isinstance(result, list):
                    self.last_products[user_id] = result
                    logger.info(f"üíæ Saved {len(result)} products for user {user_id}")
            elif tool_name == "get_product":
                result = await self.mcp_client.get_product(**tool_input)
            elif tool_name == "create_order":
                result = await self.mcp_client.create_order(**tool_input)
            elif tool_name == "track_order_by_phone":
                result = await self.mcp_client.track_order_by_phone(**tool_input)
            elif tool_name == "get_working_hours":
                result = await self.mcp_client.get_working_hours(**tool_input)
            elif tool_name == "get_shop_settings":
                result = await self.mcp_client.get_shop_settings(**tool_input)
            else:
                logger.error(f"‚ùå Unknown tool: {tool_name}")
                return f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è {tool_name}"

            logger.info(f"üì§ Tool result: {str(result)[:200]}...")  # First 200 chars
            return str(result)

        except Exception as e:
            logger.error(f"‚ùå Tool execution error: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {tool_name}: {str(e)}"

    def _save_conversation_log(self, user_id: int, message: str, response: str, tool_calls: List[Dict[str, Any]]):
        """Save conversation to JSON log file."""
        try:
            log_file = CONVERSATION_LOG_DIR / f"user_{user_id}_{datetime.now().strftime('%Y%m%d')}.jsonl"

            log_entry = {
                "timestamp": datetime.now().isoformat(),
                "user_id": user_id,
                "user_message": message,
                "ai_response": response,
                "tool_calls": tool_calls,
                "conversation_length": len(self.conversations.get(user_id, []))
            }

            with open(log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")

            logger.info(f"üíæ Conversation logged to: {log_file}")
        except Exception as e:
            logger.error(f"‚ùå Error saving conversation log: {e}")

    async def process_message(
        self,
        user_id: int,
        message: str
    ) -> str:
        """
        Process user message with AI and execute function calls.

        Args:
            user_id: Telegram user ID for conversation tracking
            message: User's text message

        Returns:
            AI response text
        """
        logger.info(f"üë§ USER {user_id}: {message}")

        tool_calls_log = []

        # Initialize conversation if needed
        if user_id not in self.conversations:
            self.conversations[user_id] = []

        # Add user message to history
        self.conversations[user_id].append({
            "role": "user",
            "content": message
        })

        # Call Claude with function calling
        response = self.client.messages.create(
            model=self.model,
            max_tokens=4096,
            system=self._get_system_prompt(),
            messages=self.conversations[user_id],
            tools=self._get_tools_schema()
        )

        # Process tool calls if any
        while response.stop_reason == "tool_use":
            # Extract tool calls and text from response
            tool_results = []
            assistant_content = []

            for block in response.content:
                if block.type == "tool_use":
                    # Log tool call
                    tool_calls_log.append({
                        "tool": block.name,
                        "input": block.input
                    })

                    # Execute tool
                    tool_result = await self._execute_tool(
                        block.name,
                        block.input,
                        user_id
                    )
                    tool_results.append({
                        "type": "tool_result",
                        "tool_use_id": block.id,
                        "content": tool_result
                    })
                    assistant_content.append(block)
                elif block.type == "text":
                    assistant_content.append(block)

            # Add assistant response with tool calls to history
            self.conversations[user_id].append({
                "role": "assistant",
                "content": assistant_content
            })

            # Add tool results to history
            if tool_results:
                self.conversations[user_id].append({
                    "role": "user",
                    "content": tool_results
                })

                # Continue conversation with tool results
                response = self.client.messages.create(
                    model=self.model,
                    max_tokens=4096,
                    system=self._get_system_prompt(),
                    messages=self.conversations[user_id],
                    tools=self._get_tools_schema()
                )

        # Extract final text response
        final_text = ""
        for block in response.content:
            if block.type == "text":
                final_text += block.text

        logger.info(f"ü§ñ AI RESPONSE: {final_text}")

        # Add final response to history
        self.conversations[user_id].append({
            "role": "assistant",
            "content": final_text
        })

        # Limit conversation history to last 20 messages
        if len(self.conversations[user_id]) > 20:
            self.conversations[user_id] = self.conversations[user_id][-20:]

        # Save conversation to log file
        self._save_conversation_log(user_id, message, final_text, tool_calls_log)

        return final_text

    def clear_conversation(self, user_id: int):
        """Clear conversation history for a user."""
        if user_id in self.conversations:
            del self.conversations[user_id]
        if user_id in self.last_products:
            del self.last_products[user_id]

    def get_last_product_images(self, user_id: int) -> List[Dict[str, Any]]:
        """
        Get product images from last list_products call for sending to Telegram.

        Returns:
            List of dicts with {url, caption} for each product with image
        """
        products = self.last_products.get(user_id, [])
        images = []

        for product in products:
            if product.get("image"):
                # Format price from tiyins to tenge
                price = product.get("price", 0)
                price_tenge = price // 100 if price else 0

                caption = f"{product.get('name', '–ü—Ä–æ–¥—É–∫—Ç')}\nüí∞ {price_tenge:,} ‚Ç∏".replace(',', ' ')

                images.append({
                    "url": product["image"],
                    "caption": caption
                })

        logger.info(f"üì∏ Found {len(images)} product images for user {user_id}")
        return images
