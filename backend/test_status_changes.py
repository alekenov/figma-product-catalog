#!/usr/bin/env python3
"""Test order status changes and refund"""
import requests
import json

BASE_URL = "http://localhost:8014/api/v1"
ORDER_ID = 74

def get_token():
    """Get admin token"""
    response = requests.post(
        f"{BASE_URL}/auth/login",
        json={"phone": "+77015211545", "password": "testpass123"}
    )
    return response.json()["access_token"]

def change_status(token, status, notes=""):
    """Change order status"""
    print(f"\nüìù –ú–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –Ω–∞: {status}")
    response = requests.patch(
        f"{BASE_URL}/orders/{ORDER_ID}/status",
        params={"status": status, "notes": notes},
        headers={"Authorization": f"Bearer {token}"}
    )

    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {data['status']}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        return False

def get_order_details(token):
    """Get order details"""
    response = requests.get(
        f"{BASE_URL}/orders/{ORDER_ID}",
        headers={"Authorization": f"Bearer {token}"}
    )
    if response.status_code == 200:
        data = response.json()
        print(f"\nüìã –ó–∞–∫–∞–∑ #{data['orderNumber']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
        print(f"   –°—É–º–º–∞: {data['total']/100} —Ç–µ–Ω–≥–µ")
        print(f"   Kaspi Payment ID: {data.get('kaspi_payment_id')}")
        return data
    return None

def test_refund(payment_id, amount):
    """Test Kaspi refund"""
    print(f"\nüí∞ –¢–µ—Å—Ç–∏—Ä—É—é –≤–æ–∑–≤—Ä–∞—Ç: {amount} —Ç–µ–Ω–≥–µ")
    response = requests.post(
        f"{BASE_URL}/kaspi/refund",
        json={"external_id": payment_id, "amount": amount}
    )

    if response.status_code == 200:
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {amount} —Ç–µ–Ω–≥–µ")
        return True
    else:
        data = response.json() if response.headers.get('content-type') == 'application/json' else {}
        error = data.get('detail', response.text)
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {error}")
        return False

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞")

    # Get token
    print("\nüîë –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...")
    token = get_token()
    print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")

    # Show current status
    order = get_order_details(token)
    if not order:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑")
        return

    kaspi_payment_id = order.get('kaspi_payment_id')
    total_amount = order['total'] / 100  # Convert kopecks to tenge

    # Change statuses: PAID ‚Üí ACCEPTED ‚Üí ASSEMBLED ‚Üí IN_DELIVERY ‚Üí DELIVERED
    # Note: API accepts lowercase status values
    statuses = [
        ("accepted", "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç"),
        ("assembled", "–ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω"),
        ("in_delivery", "–í –ø—É—Ç–∏"),
        ("delivered", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω")
    ]

    for status, notes in statuses:
        if not change_status(token, status, notes):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ {status}")
            return

    # Show final status
    print("\n" + "="*60)
    get_order_details(token)

    # Test refunds
    print("\n" + "="*60)
    print("üí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–ó–í–†–ê–¢–û–í")
    print("="*60)

    if not kaspi_payment_id:
        print("‚ùå –ù–µ—Ç Kaspi Payment ID –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
        return

    # Refund 1: 50%
    refund1 = total_amount / 2
    test_refund(kaspi_payment_id, refund1)

    # Refund 2: Remaining 50%
    refund2 = total_amount / 2
    test_refund(kaspi_payment_id, refund2)

    # Refund 3: Excess (should fail)
    print("\nüîç –ü—Ä–æ–±—É—é –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)...")
    test_refund(kaspi_payment_id, 1000)

    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*60)

if __name__ == "__main__":
    main()
