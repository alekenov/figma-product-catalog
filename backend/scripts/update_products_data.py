#!/usr/bin/env python3
"""
Script to populate product data for better AI consultation
Updates: colors, tags, descriptions, manufacturingTime
"""
import asyncio
import os
import sys
from pathlib import Path

# Add backend directory to Python path
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    env_path = backend_dir / '.env'
    if env_path.exists():
        load_dotenv(env_path)
except ImportError:
    pass

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlmodel import select
from models import Product

# Database connection - same logic as database.py
if os.getenv("DATABASE_URL"):
    # Production (Railway/Render) - PostgreSQL
    from config_render import settings
    DATABASE_URL = settings.database_url_async
    print(f"‚úÖ Using PostgreSQL from DATABASE_URL")
else:
    # Local development - SQLite
    from config_sqlite import settings
    DATABASE_URL = settings.database_url
    print(f"‚úÖ Using SQLite: {DATABASE_URL}")

# Product data updates based on approved plan
PRODUCT_UPDATES = {
    1: {  # –ë—É–∫–µ—Ç —Ä–æ–∑ (21 —à—Ç)
        "colors": ["–∫—Ä–∞—Å–Ω—ã–π"],
        "tags": ["bestseller", "same-day"],
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É–∫–µ—Ç –∏–∑ 21 –∫—Ä–∞—Å–Ω–æ–π —Ä–æ–∑—ã –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞ (60 —Å–º). –†–æ–∑—ã Freedom - –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–µ–ª–µ–∫—Ü–∏—è —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ –∫—Ä—É–ø–Ω—ã–º–∏ –±—É—Ç–æ–Ω–∞–º–∏. –£–ø–∞–∫–æ–≤–∞–Ω –≤ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫—É—é –∫—Ä–∞—Ñ—Ç-–±—É–º–∞–≥—É —Å –∞—Ç–ª–∞—Å–Ω–æ–π –ª–µ–Ω—Ç–æ–π. –ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞.",
        "manufacturingTime": 20,
        "shelfLife": 7
    },
    2: {  # –ë—É–∫–µ—Ç —Ç—é–ª—å–ø–∞–Ω–æ–≤ (25 —à—Ç)
        "colors": ["–∂–µ–ª—Ç—ã–π"],
        "tags": ["seasonal", "same-day"],
        "description": "–í–µ—Å–µ–Ω–Ω–∏–π –±—É–∫–µ—Ç –∏–∑ 25 –∂–µ–ª—Ç—ã—Ö —Ç—é–ª—å–ø–∞–Ω–æ–≤ —Å–æ—Ä—Ç–∞ Strong Gold (40 —Å–º). –°–≤–µ–∂–∏–µ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ —Ç—é–ª—å–ø–∞–Ω—ã —Å –∫—Ä—É–ø–Ω—ã–º–∏ –±—É—Ç–æ–Ω–∞–º–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤ –∏–∑—è—â–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é. –£–ø–∞–∫–æ–≤–∫–∞ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –∫—Ä–∞—Ñ—Ç-–±—É–º–∞–≥–∞ —Å –¥–∂—É—Ç–æ–≤–æ–π –ª–µ–Ω—Ç–æ–π. –î–∞—Ä–∏—Ç –≤–µ—Å–µ–Ω–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Ä–∞–¥–æ—Å—Ç—å.",
        "manufacturingTime": 15,
        "shelfLife": 5
    },
    3: {  # –ë—É–∫–µ—Ç –Ω–µ–≤–µ—Å—Ç—ã
        "colors": ["–±–µ–ª—ã–π", "—Ä–æ–∑–æ–≤—ã–π"],
        "tags": ["premium", "new"],
        "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–≤–∞–¥–µ–±–Ω—ã–π –±—É–∫–µ—Ç –∏–∑ –±–µ–ª—ã—Ö —Ä–æ–∑ Avalanche –∏ –Ω–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã—Ö –ø–∏–æ–Ω–æ–≤. –°–æ—Å—Ç–∞–≤: 15 —Ä–æ–∑ (50 —Å–º), 7 –ø–∏–æ–Ω–æ–≤, –∑–µ–ª–µ–Ω—å (—ç–≤–∫–∞–ª–∏–ø—Ç, –ø–∏—Ç—Ç–æ—Å–ø–æ—Ä—É–º). –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –∞—Ç–ª–∞—Å–Ω—ã–º–∏ –ª–µ–Ω—Ç–∞–º–∏. –°–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É.",
        "manufacturingTime": 60,
        "shelfLife": 5
    },
    4: {  # –ë—É–∫–µ—Ç —Ä–æ–º–∞—à–µ–∫ (11 —à—Ç)
        "colors": ["–±–µ–ª—ã–π"],
        "tags": ["budget", "same-day"],
        "description": "–õ–µ—Ç–Ω–∏–π –±—É–∫–µ—Ç –∏–∑ 11 –±–µ–ª—ã—Ö —Ä–æ–º–∞—à–µ–∫ (–∫—É—Å—Ç–æ–≤–∞—è —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞) —Å –∂–µ–ª—Ç–æ–π —Å–µ—Ä–µ–¥–∏–Ω–∫–æ–π. –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–µ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤ –≤ —Å—Ç–∏–ª—å–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ. –î–æ–ø–æ–ª–Ω–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∑–µ–ª–µ–Ω—å—é. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –∏ –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
        "manufacturingTime": 10,
        "shelfLife": 7
    },
    5: {  # –ù–∞–±–æ—Ä –∫–æ–Ω—Ñ–µ—Ç Raffaello
        "colors": None,  # Sweets don't have flower colors
        "tags": ["bestseller", "addon"],
        "description": "–≠–ª–∏—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ç—ã Ferrero Raffaello (150–≥) - –Ω–µ–∂–Ω–æ–µ –∫–æ–∫–æ—Å–æ–≤–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–∏–Ω–¥–∞–ª–µ–º –≤–Ω—É—Ç—Ä–∏. –ò–¥–µ–∞–ª—å–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –±—É–∫–µ—Ç—É —Ü–≤–µ—Ç–æ–≤. –ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –¥–µ–ª–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –ò—Ç–∞–ª–∏—è.",
        "manufacturingTime": None,  # No preparation needed
        "shelfLife": 180  # 6 months shelf life for chocolates
    }
}


async def update_products():
    """Update products with enriched data for AI consultation"""

    # Create async engine
    engine = create_async_engine(DATABASE_URL, echo=True)
    async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session() as session:
        print("\n=== Starting Product Data Update ===\n")

        for product_id, updates in PRODUCT_UPDATES.items():
            # Fetch product
            result = await session.execute(
                select(Product).where(Product.id == product_id)
            )
            product = result.scalar_one_or_none()

            if not product:
                print(f"‚ö†Ô∏è  Product ID {product_id} not found, skipping...")
                continue

            print(f"\nüì¶ Updating: {product.name} (ID: {product.id})")
            print(f"   Before: colors={product.colors}, tags={product.tags}, "
                  f"manufacturingTime={product.manufacturingTime}")

            # Apply updates
            product.colors = updates["colors"]
            product.tags = updates["tags"]
            product.description = updates["description"]
            product.manufacturingTime = updates["manufacturingTime"]
            product.shelfLife = updates["shelfLife"]

            print(f"   After:  colors={product.colors}, tags={product.tags}, "
                  f"manufacturingTime={product.manufacturingTime}")
            print(f"   ‚úÖ Updated successfully")

        # Commit all changes
        await session.commit()
        print("\n=== All products updated successfully! ===\n")

    await engine.dispose()


async def verify_updates():
    """Verify that updates were applied correctly"""

    engine = create_async_engine(DATABASE_URL, echo=False)
    async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session() as session:
        print("\n=== Verifying Updates ===\n")

        result = await session.execute(
            select(Product).where(Product.id.in_(PRODUCT_UPDATES.keys()))
        )
        products = result.scalars().all()

        for product in products:
            print(f"\n{product.name}:")
            print(f"  ‚Ä¢ Colors: {product.colors}")
            print(f"  ‚Ä¢ Tags: {product.tags}")
            print(f"  ‚Ä¢ Manufacturing Time: {product.manufacturingTime} min")
            print(f"  ‚Ä¢ Shelf Life: {product.shelfLife} days")
            print(f"  ‚Ä¢ Description: {product.description[:100]}...")

    await engine.dispose()


if __name__ == "__main__":
    print("üöÄ Product Data Population Script")
    print("=" * 50)

    try:
        # Run updates
        asyncio.run(update_products())

        # Verify
        asyncio.run(verify_updates())

        print("\n‚ú® All done! Products are now AI-ready for better consultation.")

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
