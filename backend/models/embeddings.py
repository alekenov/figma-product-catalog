"""
Product Embedding Models - Vector embeddings for semantic search

Stores image and text embeddings for products using pgvector.
Supports visual similarity search and semantic text search.
"""

from sqlmodel import SQLModel, Field, Relationship, Column
from sqlalchemy import String, Text, Integer
from datetime import datetime
from typing import Optional, List
from pgvector.sqlalchemy import Vector


class ProductEmbedding(SQLModel, table=True):
    """
    Vector embeddings for products (images and text).

    Stores high-dimensional vector representations generated by ML models
    (Vertex AI, CLIP, etc.) for similarity search.

    Attributes:
        id: Primary key
        product_id: Reference to products table
        embedding: 512-dimensional vector (pgvector type)
        embedding_type: 'image' or 'text' (future: 'multimodal')
        model_version: Identifier of the ML model used
        source_url: Original image URL or text content
        created_at: Timestamp when embedding was created
        updated_at: Auto-updated timestamp

    Example:
        # Image embedding
        embedding = ProductEmbedding(
            product_id=123,
            embedding=[0.123, -0.456, ...],  # 512 floats
            embedding_type='image',
            model_version='vertex-multimodal-001',
            source_url='https://flower-shop-images.../image.png'
        )

    Vector Search Example:
        # Find similar products using cosine distance
        SELECT p.*, 1 - (pe.embedding <=> :query_vector) AS similarity
        FROM products p
        JOIN product_embeddings pe ON p.id = pe.product_id
        WHERE pe.embedding_type = 'image'
        ORDER BY pe.embedding <=> :query_vector ASC
        LIMIT 10;
    """

    __tablename__ = "product_embeddings"

    # Primary key
    id: Optional[int] = Field(default=None, primary_key=True)

    # Foreign key to products
    # Note: FK constraint removed to avoid table creation order issues
    # The relationship is enforced at application level
    product_id: int = Field(
        index=True,
        description="Reference to product"
    )

    # Vector embedding (pgvector column)
    # 512 dimensions for Vertex AI multimodal embeddings
    embedding: List[float] = Field(
        sa_column=Column(Vector(512), nullable=False),
        description="512-dimensional embedding vector"
    )

    # Embedding metadata
    embedding_type: str = Field(
        default="image",
        max_length=20,
        sa_column=Column(String(20), nullable=False, index=True),
        description="Type of embedding: 'image' or 'text'"
    )

    model_version: str = Field(
        default="vertex-multimodal-001",
        max_length=50,
        sa_column=Column(String(50), nullable=False),
        description="ML model identifier (e.g., 'vertex-multimodal-001', 'clip-vit-b-32')"
    )

    source_url: Optional[str] = Field(
        default=None,
        sa_column=Column(Text, nullable=True),
        description="Image URL or text snippet used for embedding generation"
    )

    # Timestamps
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="When embedding was first created"
    )

    updated_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="When embedding was last updated (auto-updated by trigger)"
    )

    # Relationships
    product: Optional["Product"] = Relationship(
        back_populates="embeddings"
    )

    class Config:
        """SQLModel configuration."""
        arbitrary_types_allowed = True  # Allow pgvector.sqlalchemy.Vector type


# Add relationship to Product model (will be imported in models/__init__.py)
# Product.embeddings: List[ProductEmbedding] = Relationship(back_populates="product")
