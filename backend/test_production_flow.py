#!/usr/bin/env python3
"""Test complete Kaspi Pay flow on production"""
import requests
import json
import time

BASE_URL = "https://figma-product-catalog-production.up.railway.app/api/v1"
TRACKING_ID = "788007734"
KASPI_PAYMENT_ID = "12707474637"

def get_token():
    """Get admin token"""
    print("üîë –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    response = requests.post(
        f"{BASE_URL}/auth/login",
        json={"phone": "+77015211545", "password": "testpass123"}
    )
    if response.status_code == 200:
        token = response.json()["access_token"]
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        print(response.text)
        return None

def check_payment_status():
    """Check Kaspi payment status"""
    print(f"\nüí∞ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ Kaspi ID: {KASPI_PAYMENT_ID}...")
    response = requests.get(f"{BASE_URL}/kaspi/status/{KASPI_PAYMENT_ID}")

    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {data.get('status')}")
        print(f"   –°—É–º–º–∞: {data.get('amount')} —Ç–µ–Ω–≥–µ")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return None

def get_order_details(token, order_id):
    """Get order details"""
    print(f"\nüìã –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞...")
    response = requests.get(
        f"{BASE_URL}/orders/{order_id}",
        headers={"Authorization": f"Bearer {token}"}
    )

    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{data.get('orderNumber')}")
        print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
        print(f"   Kaspi Payment Status: {data.get('kaspi_payment_status')}")
        print(f"   –°—É–º–º–∞: {data.get('total', 0)/100} —Ç–µ–Ω–≥–µ")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return None

def find_order_by_tracking(token):
    """Find order by tracking ID"""
    print(f"\nüîç –ò—â—É –∑–∞–∫–∞–∑ –ø–æ tracking ID: {TRACKING_ID}...")
    response = requests.get(
        f"{BASE_URL}/orders/",
        headers={"Authorization": f"Bearer {token}"},
        params={"limit": 100}
    )

    if response.status_code == 200:
        orders = response.json()
        for order in orders:
            if order.get('tracking_id') == TRACKING_ID:
                print(f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: ID {order['id']}, #{order.get('orderNumber')}")
                return order['id']
        print(f"‚ùå –ó–∞–∫–∞–∑ —Å tracking_id {TRACKING_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return None

def change_status(token, order_id, status, notes=""):
    """Change order status"""
    print(f"\nüìù –ú–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –Ω–∞: {status}...")
    response = requests.patch(
        f"{BASE_URL}/orders/{order_id}/status",
        params={"status": status, "notes": notes},
        headers={"Authorization": f"Bearer {token}"}
    )

    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {data.get('status')}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return False

def test_refund(amount):
    """Test Kaspi refund"""
    print(f"\nüí∏ –î–µ–ª–∞—é –≤–æ–∑–≤—Ä–∞—Ç: {amount} —Ç–µ–Ω–≥–µ...")
    response = requests.post(
        f"{BASE_URL}/kaspi/refund",
        json={"external_id": KASPI_PAYMENT_ID, "amount": amount}
    )

    if response.status_code == 200:
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {amount} —Ç–µ–Ω–≥–µ")
        return True
    else:
        data = response.json() if response.headers.get('content-type') == 'application/json' else {}
        error = data.get('detail', response.text)
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {error}")
        return False

def main():
    print("="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê KASPI PAY –ù–ê –ü–†–û–î–ê–ö–®–ï–ù–ï")
    print("="*60)

    # 1. Get admin token
    token = get_token()
    if not token:
        return

    # 2. Check Kaspi payment status
    payment_status = check_payment_status()

    # 3. Find order by tracking ID
    order_id = find_order_by_tracking(token)
    if not order_id:
        print("\n‚ö†Ô∏è  –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞—é —Ç–µ—Å—Ç")
        return

    # 4. Get order details
    order = get_order_details(token, order_id)
    if not order:
        return

    total_amount = order.get('total', 0) / 100
    current_status = order.get('status')

    print(f"\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   –ó–∞–∫–∞–∑ ID: {order_id}")
    print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {current_status}")
    print(f"   Kaspi Payment: {order.get('kaspi_payment_status')}")
    print(f"   –°—É–º–º–∞: {total_amount} —Ç–µ–Ω–≥–µ")

    # 5. Change order statuses
    if current_status == "NEW":
        print("\nüîÑ –ó–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW, –º–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å—ã...")

        statuses = [
            ("paid", "–û–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ Kaspi"),
            ("accepted", "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç"),
            ("assembled", "–ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω"),
            ("in_delivery", "–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É"),
            ("delivered", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω")
        ]

        for status, notes in statuses:
            if not change_status(token, order_id, status, notes):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ {status}")
                return
            time.sleep(1)
    else:
        print(f"\n‚ö†Ô∏è  –ó–∞–∫–∞–∑ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ {current_status}, –ø—Ä–æ–ø—É—Å–∫–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")

    # 6. Show final order state
    print("\n" + "="*60)
    print("–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ö–ê–ó–ê")
    print("="*60)
    get_order_details(token, order_id)

    # 7. Test refunds
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–ó–í–†–ê–¢–û–í")
    print("="*60)

    # Refund 1: 50%
    refund1 = total_amount / 2
    test_refund(refund1)
    time.sleep(1)

    # Refund 2: Remaining 50%
    refund2 = total_amount / 2
    test_refund(refund2)
    time.sleep(1)

    # Refund 3: Excess (should fail)
    print("\nüîç –ü—Ä–æ–±—É—é –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)...")
    test_refund(1000)

    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*60)

if __name__ == "__main__":
    main()
