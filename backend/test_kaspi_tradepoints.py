#!/usr/bin/env python3
"""
Kaspi Trade Points API Tester - r3 —É—Å–∏–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ Kaspi QR API
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mTLS (mutual TLS) –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_kaspi_tradepoints.py [--bin BIN] [--env prod|test]
"""

import requests
import uuid
import sys
import argparse
from typing import Dict, Any, Optional


class KaspiTradePointsClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kaspi Trade Points API"""

    # API endpoints
    ENDPOINTS = {
        "test": "https://mtokentest.kaspi.kz:8545",
        "prod": "https://mtoke.kaspi.kz:8545"
    }

    def __init__(
        self,
        cert_path: str,
        key_path: str,
        key_password: str,
        environment: str = "test"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            cert_path: –ü—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (.cer)
            key_path: –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É (.key)
            key_password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            environment: –û–∫—Ä—É–∂–µ–Ω–∏–µ - "test" –∏–ª–∏ "prod"
        """
        self.cert_path = cert_path
        self.key_path = key_path
        self.key_password = key_password
        self.base_url = self.ENDPOINTS.get(environment, self.ENDPOINTS["test"])
        self.environment = environment

    def get_trade_points(self, organization_bin: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

        Args:
            organization_bin: –ë–ò–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (12 —Ü–∏—Ñ—Ä)

        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏

        Example:
            >>> client.get_trade_points("991011000048")
            {
                "StatusCode": 0,
                "Message": "OK",
                "Data": [
                    {"TradePointId": 1, "TradePointName": "–ú–∞–≥–∞–∑–∏–Ω 1"},
                    {"TradePointId": 2, "TradePointName": "–ú–∞–≥–∞–∑–∏–Ω 2"}
                ]
            }
        """
        url = f"{self.base_url}/r3/v01/partner/tradepoints/{organization_bin}"

        headers = {
            "X-Request-ID": str(uuid.uuid4()),
            "Content-Type": "application/json"
        }

        print(f"\n{'='*60}")
        print(f"–ó–∞–ø—Ä–æ—Å –∫ Kaspi Trade Points API")
        print(f"{'='*60}")
        print(f"Environment: {self.environment}")
        print(f"URL: {url}")
        print(f"–ë–ò–ù: {organization_bin}")
        print(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {self.cert_path}")
        print(f"–ö–ª—é—á: {self.key_path}")
        print(f"Request-ID: {headers['X-Request-ID']}")
        print(f"{'='*60}\n")

        try:
            # –í–ê–ñ–ù–û: requests –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–ª—é—á–µ–π –Ω–∞–ø—Ä—è–º—É—é
            # –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∑–∞—Ä–∞–Ω–µ–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PEM –±–µ–∑ –ø–∞—Ä–æ–ª—è
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å openssl –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:
            # openssl rsa -in cvety-new.key -out cvety-new-decrypted.key -passin pass:PASSWORD

            response = requests.get(
                url,
                cert=(self.cert_path, self.key_path),
                headers=headers,
                verify=True,  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞
                timeout=30
            )

            print(f"HTTP Status: {response.status_code}")
            print(f"Response Headers:")
            for key, value in response.headers.items():
                print(f"  {key}: {value}")
            print()

            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = response.json()
                print(f"Response Body (JSON):")
                import json
                print(json.dumps(data, indent=2, ensure_ascii=False))
                return data
            except ValueError:
                print(f"Response Body (Text):")
                print(response.text)
                return {"error": "Invalid JSON response", "text": response.text}

        except requests.exceptions.SSLError as e:
            print(f"‚ùå SSL/TLS –æ—à–∏–±–∫–∞: {e}")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–ª–∏ –∫–ª—é—á")
            print("2. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫")
            print("3. IP –∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist —É Kaspi")
            print("4. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á (–µ—Å–ª–∏ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º)")
            return {"error": "SSL error", "details": str(e)}

        except requests.exceptions.ConnectionError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {"error": "Connection error", "details": str(e)}

        except requests.exceptions.Timeout:
            print(f"‚ùå Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 30 —Å–µ–∫—É–Ω–¥")
            return {"error": "Timeout"}

        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"error": "Unknown error", "details": str(e)}

    def register_device(
        self,
        organization_bin: str,
        device_id: str,
        trade_point_id: int
    ) -> Dict[str, Any]:
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∫–∞—Å—Å—É/—Ç–µ—Ä–º–∏–Ω–∞–ª)

        Args:
            organization_bin: –ë–ò–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            device_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "cvety-kiosk-001")
            trade_point_id: ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏–∑ get_trade_points()

        Returns:
            –û—Ç–≤–µ—Ç —Å DeviceToken –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        url = f"{self.base_url}/r3/v01/device/register"

        headers = {
            "X-Request-ID": str(uuid.uuid4()),
            "Content-Type": "application/json"
        }

        payload = {
            "OrganizationBin": organization_bin,
            "DeviceId": device_id,
            "TradePointId": trade_point_id
        }

        print(f"\n{'='*60}")
        print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print(f"{'='*60}")
        print(f"URL: {url}")
        print(f"Payload:")
        import json
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print(f"{'='*60}\n")

        try:
            response = requests.post(
                url,
                cert=(self.cert_path, self.key_path),
                headers=headers,
                json=payload,
                verify=True,
                timeout=30
            )

            print(f"HTTP Status: {response.status_code}")

            try:
                data = response.json()
                print(f"Response:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
                return data
            except ValueError:
                print(f"Response (Text): {response.text}")
                return {"error": "Invalid JSON response", "text": response.text}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="Kaspi Trade Points API Tester"
    )
    parser.add_argument(
        "--bin",
        default="991011000048",
        help="–ë–ò–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (default: 991011000048)"
    )
    parser.add_argument(
        "--env",
        choices=["test", "prod"],
        default="test",
        help="–û–∫—Ä—É–∂–µ–Ω–∏–µ: test –∏–ª–∏ prod (default: test)"
    )
    parser.add_argument(
        "--cert",
        default="/home/bitrix/kaspi_certificates/prod/cvety.cer",
        help="–ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É"
    )
    parser.add_argument(
        "--key",
        default="/home/bitrix/kaspi_certificates/prod/cvety-new.key",
        help="–ü—É—Ç—å –∫ –∫–ª—é—á—É"
    )
    parser.add_argument(
        "--password",
        default="sy3t6G2HhuG1m4pEK8AJ2",
        help="–ü–∞—Ä–æ–ª—å –¥–ª—è –∫–ª—é—á–∞"
    )
    parser.add_argument(
        "--register-device",
        action="store_true",
        help="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫"
    )
    parser.add_argument(
        "--device-id",
        default="cvety-railway-test-001",
        help="ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = KaspiTradePointsClient(
        cert_path=args.cert,
        key_path=args.key,
        key_password=args.password,
        environment=args.env
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
    result = client.get_trade_points(args.bin)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
    if result.get("StatusCode") == 0:
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏!")
        trade_points = result.get("Data", [])
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(trade_points)}")

        for tp in trade_points:
            print(f"  - ID: {tp.get('TradePointId')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {tp.get('TradePointName')}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
        if args.register_device and trade_points:
            first_tp_id = trade_points[0].get("TradePointId")
            print(f"\nüìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ {first_tp_id}...")

            device_result = client.register_device(
                organization_bin=args.bin,
                device_id=args.device_id,
                trade_point_id=first_tp_id
            )

            if device_result.get("StatusCode") == 0:
                device_token = device_result.get("Data", {}).get("DeviceToken")
                print(f"\n‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                print(f"DeviceToken: {device_token}")
                print(f"\nüí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ DeviceToken –≤ —Ç–∞–±–ª–∏—Ü–µ KaspiPayConfig:")
                print(f"  - organization_bin: {args.bin}")
                print(f"  - trade_point_id: {first_tp_id}")
                print(f"  - device_token: {device_token}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                print(f"StatusCode: {device_result.get('StatusCode')}")
                print(f"Message: {device_result.get('Message')}")

    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
        status_code = result.get("StatusCode", "unknown")
        message = result.get("Message", result.get("error", "Unknown error"))

        print(f"StatusCode: {status_code}")
        print(f"Message: {message}")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫
        error_hints = {
            -10000: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ IP whitelist",
            -999: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Kaspi API",
            -14000002: "–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ë–ò–ù–∞"
        }

        if status_code in error_hints:
            print(f"\nüí° {error_hints[status_code]}")


if __name__ == "__main__":
    main()
