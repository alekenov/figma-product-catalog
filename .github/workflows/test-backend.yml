name: Backend Tests & Quality

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/test-backend.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

jobs:
  lint:
    name: Lint & Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -q -r requirements.txt

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets in config files..."
          if grep -r "dev-secret-key-change-in-production" . --include="*.py" | grep -v ".git"; then
            echo "❌ FAILURE: Found hardcoded default secrets!"
            exit 1
          fi
          if grep -r "ABE7142D-D8AB-76AF-8D6C-2C4FAEA9B144" . --include="*.py" | grep -v ".git"; then
            echo "❌ FAILURE: Found hardcoded Kaspi token!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

      - name: Check for print() statements (logging violations)
        run: |
          echo "Checking for print() statements outside of debugging..."
          if grep -r "print(" auth_utils.py --include="*.py" | grep -v "#" | grep -v "def print"; then
            echo "❌ FAILURE: Found print() statements in auth_utils.py"
            echo "Use logger instead from core.logging"
            exit 1
          fi
          echo "✅ No print() statements in auth_utils.py"

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -q -r requirements.txt
          pip install -q pytest-cov

      - name: Run pytest with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          SECRET_KEY: test-secret-key-minimum-32-characters-long
          KASPI_ACCESS_TOKEN: test-token
          DEBUG: "false"
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term -v
          # Tests MUST pass for CI to succeed - failing tests block merge

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  smoke-test:
    name: API Smoke Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -q -r requirements.txt

      - name: Start backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          SECRET_KEY: test-secret-key-minimum-32-characters-long
          KASPI_ACCESS_TOKEN: test-token
          DEBUG: "false"
        run: |
          python main.py &
          sleep 5
          echo "Backend started"

      - name: Test health endpoint
        run: |
          response=$(curl -s -w "\n%{http_code}" http://localhost:8014/health)
          http_code=$(echo "$response" | tail -n1)

          if [ "$http_code" != "200" ]; then
            echo "❌ Health check failed with status $http_code"
            exit 1
          fi
          echo "✅ Health check passed"

      - name: Test ready endpoint
        run: |
          response=$(curl -s -w "\n%{http_code}" http://localhost:8014/ready)
          http_code=$(echo "$response" | tail -n1)

          if [ "$http_code" != "200" ]; then
            echo "❌ Readiness check failed with status $http_code"
            exit 1
          fi
          echo "✅ Readiness check passed"

      - name: Test metrics endpoint
        run: |
          response=$(curl -s -w "\n%{http_code}" http://localhost:8014/metrics)
          http_code=$(echo "$response" | tail -n1)

          if [ "$http_code" != "200" ]; then
            echo "❌ Metrics endpoint failed with status $http_code"
            exit 1
          fi
          echo "✅ Metrics endpoint passed"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, smoke-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.smoke-test.result }}" != "success" ]; then
            echo "❌ Some tests failed"
            exit 1
          fi
          echo "✅ All tests passed"
