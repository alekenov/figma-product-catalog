#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Agent Service —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–∞–π–º–∏–Ω–≥–æ–º.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ Telegram.
"""
import asyncio
import httpx
import time
import json
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.panel import Panel

console = Console()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AI_AGENT_URL = "http://localhost:8000"
MCP_SERVER_URL = "http://localhost:8001"
USER_ID = "test_user_123"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
TEST_MESSAGES = [
    {"message": "–ø—Ä–∏–≤–µ—Ç", "expected": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
    {"message": "–ø–æ–∫–∞–∂–∏ –±—É–∫–µ—Ç—ã", "expected": "—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"},
    {"message": "–±—É–∫–µ—Ç —Ä–æ–∑ –¥–æ 10000", "expected": "—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ"},
    {"message": "—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å", "expected": "–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞"},
    {"message": "—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "expected": "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"},
]

async def test_single_message(message: str, session: httpx.AsyncClient) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞."""

    console.print(f"\n[blue]‚û§ –û—Ç–ø—Ä–∞–≤–ª—è—é:[/blue] {message}")

    start_time = time.time()

    try:
        response = await session.post(
            f"{AI_AGENT_URL}/chat",
            json={
                "message": message,
                "user_id": USER_ID,
                "channel": "telegram"
            },
            timeout=60.0
        )

        elapsed = time.time() - start_time

        if response.status_code == 200:
            result = response.json()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.print(f"[green]‚úì –û—Ç–≤–µ—Ç –∑–∞ {elapsed:.2f}—Å:[/green]")

            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
            text = result.get("text", "")[:200]
            if len(result.get("text", "")) > 200:
                text += "..."

            console.print(Panel(text, title="–û—Ç–≤–µ—Ç AI", border_style="green"))

            return {
                "status": "success",
                "time": elapsed,
                "response": result
            }
        else:
            console.print(f"[red]‚úó –û—à–∏–±–∫–∞ {response.status_code}:[/red] {response.text}")
            return {
                "status": "error",
                "time": elapsed,
                "error": f"HTTP {response.status_code}"
            }

    except httpx.TimeoutException:
        elapsed = time.time() - start_time
        console.print(f"[red]‚úó –¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {elapsed:.2f}—Å[/red]")
        return {
            "status": "timeout",
            "time": elapsed
        }
    except Exception as e:
        elapsed = time.time() - start_time
        console.print(f"[red]‚úó –û—à–∏–±–∫–∞: {e}[/red]")
        return {
            "status": "error",
            "time": elapsed,
            "error": str(e)
        }

async def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤."""

    console.print("\n[cyan]üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ä–≤–∏—Å—ã...[/cyan]\n")

    services = [
        ("AI Agent", AI_AGENT_URL, "/health"),
        ("MCP Server", MCP_SERVER_URL, "/health"),
        ("Backend", "http://localhost:8014", "/health"),
    ]

    table = Table(title="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤", show_header=True, header_style="bold magenta")
    table.add_column("–°–µ—Ä–≤–∏—Å", style="cyan", width=15)
    table.add_column("URL", style="blue")
    table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")
    table.add_column("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", justify="right")

    async with httpx.AsyncClient(timeout=5.0) as client:
        for name, url, endpoint in services:
            try:
                start = time.time()
                response = await client.get(f"{url}{endpoint}")
                elapsed = time.time() - start

                if response.status_code == 200:
                    table.add_row(
                        name,
                        f"{url}",
                        "[green]‚úì –†–∞–±–æ—Ç–∞–µ—Ç[/green]",
                        f"{elapsed:.3f}—Å"
                    )
                else:
                    table.add_row(
                        name,
                        f"{url}",
                        f"[yellow]‚ö† HTTP {response.status_code}[/yellow]",
                        f"{elapsed:.3f}—Å"
                    )
            except Exception as e:
                table.add_row(
                    name,
                    f"{url}",
                    "[red]‚úó –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/red]",
                    "-"
                )

    console.print(table)

async def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await check_services()

    console.print("\n[cyan]üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Agent...[/cyan]\n")

    results = []

    async with httpx.AsyncClient() as session:
        for test in TEST_MESSAGES:
            result = await test_single_message(test["message"], session)
            result["message"] = test["message"]
            result["expected"] = test["expected"]
            results.append(result)

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    console.print("\n[cyan]üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:[/cyan]\n")

    table = Table(title="–°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤", show_header=True, header_style="bold magenta")
    table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="cyan", width=25)
    table.add_column("–û–∂–∏–¥–∞–ª–æ—Å—å", style="blue", width=20)
    table.add_column("–°—Ç–∞—Ç—É—Å", justify="center", width=15)
    table.add_column("–í—Ä–µ–º—è", justify="right", width=10)

    total_time = 0
    success_count = 0

    for r in results:
        status_style = {
            "success": "[green]‚úì –£—Å–ø–µ—Ö[/green]",
            "error": "[red]‚úó –û—à–∏–±–∫–∞[/red]",
            "timeout": "[red]‚è± –¢–∞–π–º–∞—É—Ç[/red]"
        }

        table.add_row(
            r["message"][:25],
            r["expected"],
            status_style.get(r["status"], r["status"]),
            f"{r['time']:.2f}—Å"
        )

        total_time += r["time"]
        if r["status"] == "success":
            success_count += 1

    console.print(table)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print(f"\n[bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:[/bold]")
    console.print(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}/{len(results)}")
    console.print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/len(results):.2f}—Å")
    console.print(f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if total_time/len(results) > 5:
        console.print("\n[red]‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ > 5 —Å–µ–∫—É–Ω–¥![/red]")
        console.print("[yellow]–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:[/yellow]")
        console.print("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI (gpt-5-mini –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        console.print("‚Ä¢ –ò–∑–±—ã—Ç–æ—á–Ω–∞—è 3-—à–∞–≥–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        console.print("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å MCP Server")

async def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    console.print("[cyan]üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/cyan]")
    console.print("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n")

    async with httpx.AsyncClient() as session:
        while True:
            message = console.input("[blue]–í—ã: [/blue]")

            if message.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                break

            await test_single_message(message, session)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    console.print(Panel.fit(
        "üß™ [bold cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Agent Service[/bold cyan]",
        border_style="cyan"
    ))

    console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    console.print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    console.print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    console.print("3. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")

    choice = console.input("\n[cyan]–í—ã–±–æ—Ä (1/2/3): [/cyan]")

    if choice == "1":
        asyncio.run(run_tests())
    elif choice == "2":
        asyncio.run(interactive_test())
    elif choice == "3":
        asyncio.run(check_services())
    else:
        console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")

if __name__ == "__main__":
    main()