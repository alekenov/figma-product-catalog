#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ AI Agent –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π.
"""
import subprocess
import threading
import time
from datetime import datetime
from rich.console import Console
from rich.layout import Layout
from rich.live import Live
from rich.panel import Panel
from rich.syntax import Syntax
from rich.table import Table
import re

console = Console()

class LogMonitor:
    def __init__(self):
        self.logs = {
            "ai_agent": [],
            "mcp_server": [],
            "telegram": [],
            "backend": []
        }
        self.stats = {
            "requests": 0,
            "errors": 0,
            "timeouts": 0,
            "avg_time": 0
        }
        self.running = True

    def tail_log(self, log_file, log_key):
        """–°–ª–µ–¥–∏—Ç –∑–∞ –ª–æ–≥–æ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            process = subprocess.Popen(
                ['tail', '-f', log_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            for line in process.stdout:
                if not self.running:
                    break

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä (–º–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–æ–∫)
                self.logs[log_key].append(line.strip())
                if len(self.logs[log_key]) > 50:
                    self.logs[log_key].pop(0)

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                self.analyze_line(line, log_key)

        except Exception as e:
            self.logs[log_key].append(f"[red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}[/red]")

    def analyze_line(self, line, source):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if "POST /chat" in line or "Incoming chat request" in line:
            self.stats["requests"] += 1

        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        if "ERROR" in line or "error" in line.lower():
            self.stats["errors"] += 1

        # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        time_match = re.search(r'(\d+\.\d+)s', line)
        if time_match:
            response_time = float(time_match.group(1))
            if self.stats["avg_time"] == 0:
                self.stats["avg_time"] = response_time
            else:
                self.stats["avg_time"] = (self.stats["avg_time"] + response_time) / 2

    def format_log_lines(self, lines, title):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        formatted = []
        for line in lines[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if "ERROR" in line:
                formatted.append(f"[red]{line}[/red]")
            elif "WARNING" in line:
                formatted.append(f"[yellow]{line}[/yellow]")
            elif "SUCCESS" in line or "200 OK" in line:
                formatted.append(f"[green]{line}[/green]")
            elif "INTENT" in line or "Tool" in line:
                formatted.append(f"[cyan]{line}[/cyan]")
            else:
                formatted.append(line)

        return Panel(
            "\n".join(formatted) if formatted else "–û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤...",
            title=title,
            border_style="cyan"
        )

    def create_stats_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", show_header=True)
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", justify="right")

        table.add_row("–ó–∞–ø—Ä–æ—Å–æ–≤", str(self.stats["requests"]))
        table.add_row("–û—à–∏–±–æ–∫", f"[red]{self.stats['errors']}[/red]" if self.stats["errors"] > 0 else "0")
        table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{self.stats['avg_time']:.2f}—Å")

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–±–ª–µ–º
        if self.stats["avg_time"] > 5:
            table.add_row("‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å", "[red]–ú–µ–¥–ª–µ–Ω–Ω–æ[/red]")
        elif self.stats["errors"] > 0:
            table.add_row("‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å", "[yellow]–ï—Å—Ç—å –æ—à–∏–±–∫–∏[/yellow]")
        else:
            table.add_row("‚úÖ –°—Ç–∞—Ç—É—Å", "[green]–†–∞–±–æ—Ç–∞–µ—Ç[/green]")

        return table

    def create_layout(self):
        """–°–æ–∑–¥–∞–µ—Ç layout –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        layout = Layout()

        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=8)
        )

        layout["header"].update(
            Panel(
                f"üîç [bold cyan]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ AI Agent[/bold cyan] | {datetime.now().strftime('%H:%M:%S')}",
                border_style="cyan"
            )
        )

        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ª–æ–≥–∞–º–∏
        main = Layout()
        main.split_row(
            Layout(self.format_log_lines(self.logs["ai_agent"], "AI Agent"), name="ai_agent"),
            Layout(self.format_log_lines(self.logs["mcp_server"], "MCP Server"), name="mcp")
        )
        layout["main"].update(main)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        layout["footer"].update(self.create_stats_table())

        return layout

def main():
    monitor = LogMonitor()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threads = [
        threading.Thread(target=monitor.tail_log, args=("/tmp/ai-agent-new.log", "ai_agent")),
        threading.Thread(target=monitor.tail_log, args=("/tmp/mcp-server-final.log", "mcp_server")),
        threading.Thread(target=monitor.tail_log, args=("telegram-bot/logs/bot_8.log", "telegram"))
    ]

    for t in threads:
        t.daemon = True
        t.start()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    try:
        with Live(monitor.create_layout(), refresh_per_second=1, screen=True) as live:
            while True:
                time.sleep(0.5)
                live.update(monitor.create_layout())
    except KeyboardInterrupt:
        monitor.running = False
        console.print("\n[yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")

if __name__ == "__main__":
    console.print("[cyan]–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤...[/cyan]")
    console.print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    main()